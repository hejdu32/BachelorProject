package xmlParser.implementations.visualization;


import xmlParser.implementations.parsing.CustomNode;
import xmlParser.implementations.parsing.CustomWay;
import xmlParser.implementations.parsing.Edge;
import xmlParser.implementations.parsing.XMLParserImpl;
import xmlParser.implementations.util.DrawingUtil;
import xmlParser.implementations.util.NodeFinderImpl;
import xmlParser.implementations.util.ViewLimiterImpl;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.List;


public class GraphOfNodes extends JPanel{


    private final XMLParserImpl parser;
    private final ViewLimiterImpl viewLimiter;
    private final NodeFinderImpl nodeFinder;
    private BufferedImage ballImage;
    private BufferedImage prerenderedImage;
    private BufferedImage bufferedImage;
    private boolean isGraphDrawn = false;
    private int pressedX;
    private int pressedY;
    private double zoomFactor = 1.0;
    private boolean zoomable = true;
    private int fullResolutionFactor = 1;//cant be change for some reason
    private int viewResolution = 1300; //cant be change for some reason
    private int fullResolutionX = viewResolution * fullResolutionFactor;
    private int fullResolutionY = viewResolution * fullResolutionFactor;
    private double imageX = 0;
    private double imageY = 0;
    private int yOffset;
    private int xOffset;
    private double windowScale;
    private List<CustomWay> ways;
    private boolean firstClick = true;
    private int drawX;
    private int drawY;
    private boolean clicked = false;
    private int redDrawX;
    private int redDrawY;
    private int blueDrawX;
    private int blueDrawY;
    private List<Long> redPart = new ArrayList<>();
    private Color myColor = Color.red;
    private Color seenColor = Color.orange;
    private List<Point> tilePoints = new ArrayList<>();
    private Map<Point, BufferedImage> tiles = new HashMap<>();
    private Map<Point, Double> tileZoom = new HashMap<>();
    private int zoomLevel = 1;
    private boolean mouseReleased = false;
    private int tileRes = 100;
    private boolean inited = false;
    private Map<Point, Boolean> drawTiles = new HashMap<>();
    private Map<Point, List<CustomWay>> tileWays = new HashMap<>();
    private Map<Point, List<Shape>> tileShapes = new HashMap<>();
    private int routeFactor = 8;
    private List<Long> testListMalta = Arrays.asList(146885871L,1498913630L,602940010L,602940011L,602940009L,244561411L,1948677749L,1428654107L,1517489426L,158787955L,291583304L,5174486793L,246174630L,6471680475L,246174657L,246174653L,1680350280L,3233330906L,7404249690L,246174605L,246174599L,246174600L,246174601L,246174602L,7404249688L,146885877L,2217659273L,246174697L,246174492L,146885871L,246174473L,1498913627L,602939949L,246174469L,246174470L,1498913624L,1498913626L,1498913607L,1498913609L,1498913613L,246174473L,1498913824L,1498913849L,246178614L,4488127205L,1498913835L,3233330890L,246174466L,3233330345L,1498913628L,3233330314L,3233330897L,3233330326L,7404228579L,246174602L,246174603L,3233330310L,3233330863L,3233330340L,246174697L,7404249782L,601165797L,129422499L,1689685845L,301540003L,244561410L,244559587L,1498913826L,158788640L,5300974855L,246515531L,3327152776L,246515529L,3327152772L,8308149586L,1428654105L,265062675L,8308149583L,8308149582L,8308149576L,8308149580L,8308149574L,158788524L,246515460L,8308149572L,8308149579L,158788524L,8308149581L,8308149573L,8308149575L,8308149578L,8308149577L,3707529115L,3707529089L,3707529086L,3679831310L,3707529078L,146885873L,246515460L,158787950L,3707529123L,3707529078L,3707529929L,3707529926L,3707529931L,1498913644L,244559588L,2080288011L,244557493L,244557496L,246350591L,527513475L,8044047316L,129422490L,1517489364L,3679843139L,158787573L,3679843139L,3679843143L,244560885L,146885876L,291583318L,291583286L,291583287L,291583284L,291583283L,1498913719L,1498913683L,1498913688L,1498913683L,246174653L,3521321367L,7404249687L,3679831295L,244564069L,3679831310L,3679831295L,3679831320L,246350415L,158787955L,246515691L,601165786L,265062905L,601165784L,601165796L,601165795L,246516125L,246516140L,129422511L,6471680438L,1517539495L,244559288L,6819507571L,246516095L,1676041425L,244564250L,7923431774L,1517489347L,232604601L,232604545L,232604420L,232604313L,3744084537L,232604397L,232604433L,232604545L,246516225L,232604563L,265754323L,232604313L,1428654107L,4791291651L,4791291652L,3233330326L,4791291649L,4791291650L,3707529931L,3707529068L,1428654098L,265062904L,5034295864L,3327152784L,601165784L,146897910L,4791291649L,5262229815L,246515936L,6471680467L,1517540879L,1428654099L,5291984808L,246515809L,246515882L,5291984818L,158788950L,246516330L,1428654098L,246516223L,3679843139L,244564066L,3679831320L,244559287L,246516703L,5291984820L,246516004L,246515531L,246515935L,246515971L,5291984812L,1498913649L,246515843L,601165792L,4781057475L,4781057475L,3707529959L,246516139L,1517489535L,158787953L,246515472L,246515843L,4456032232L,246516043L,246515972L,1498913637L,246515972L,246516038L,246516043L,246515971L,3327152777L,1689685857L,3541812131L,3707529123L,246515530L,246515529L,246516000L,3327152772L,246515886L,246515530L,146885873L,246515998L,4456032232L,4456032235L,246515998L,4456032231L,158788367L,246516095L,8308149584L,1517489463L,246349190L,1517539503L,1676041304L,602940011L,602940013L,1676041304L,2803009519L,246174604L,2313068030L,246174604L,2313068016L,2313067960L,246174603L,2313068011L,2313068024L,246174467L,2803009516L,2803009516L,2803009517L,244559289L,4449502897L,146897912L,4449502899L,244559589L,246174606L,246515533L,3470955741L,3470955736L,246516000L,246515999L,3134112099L,158788368L,146897909L,1514335197L,1514335197L,6471680449L,6471680439L,6471680438L,3700761993L,2313068017L,146885870L,6471680440L,1250871655L,244559296L,158789125L,265062625L,158789125L,1498913905L,1250871681L,244560885L,601165788L,601165786L,601165794L,1250871681L,129836905L,1250871669L,1988171160L,8044047314L,265062903L,246348963L,244561566L,244561888L,244557496L,126412781L,291583288L,1517489458L,158787574L,5038682646L,1517489475L,1589598235L,1498913639L,1498913653L,5046812669L,301540005L,244559589L,1498913958L,1498913964L,1689685848L,246515472L,1689685850L,265062775L,246516141L,232604601L,1517489548L,158787574L,158788950L,158788950L,1428654106L,1948677748L,246349160L,244564253L,1589598235L,246174476L,146885871L,1589598300L,4456032230L,126412781L,1498913726L,126412732L,129422570L,1498913944L,3470955722L,246515691L,3793744490L,3707529929L,1428648976L,244564066L,7404228576L,7404228576L,3233330906L,7404228578L,1517489426L,158787952L,5253481828L,246174630L,246516143L,1517489547L,244562941L,1517489535L,158787950L,1517489304L,244560063L,158787951L,5009422447L,3707529926L,1517489525L,246178613L,158787952L,1517489476L,158787951L,244559689L,246174599L,2313068030L,7404249690L,244564250L,7404249691L,129422511L,244559586L,198452L,527513465L,3134112098L,158788671L,245683416L,1517539495L,158788671L,244561411L,246349190L,245683416L,1517539503L,5291984808L,1517540879L,1517540880L,1517540887L,1428654099L,1517540885L,1428654099L,3394197865L,246516355L,246516703L,244560526L,1498913762L,1428654107L,246516702L,244559689L,244559284L,2313147199L,1250871624L,198452L,244560448L,244560449L,158788524L,1498913674L,2313147456L,2080288010L,1498913800L,1498913686L,244557497L,129836905L,129422638L,1517489509L,246516207L,244562941L,1498913816L,1498913761L,1498913825L,5046812668L,1517539497L,3327152784L,244561889L,244561568L,244559587L,244560063L,246516330L,244557493L,1498913678L,158788368L,602939949L,4449502898L,1498913629L,246174474L,246174472L,246174471L,246174466L,246174468L,246174467L,1498913611L,245683413L,246515533L,246516335L,1498913631L,146885870L,198452L,1498913756L,5046812667L,244559586L,126412781L,244559688L,158788640L,1498913681L,1498913681L,246516223L,291583287L,1498913689L,8308149572L,3394197865L,244559287L,291583316L,1498913730L,1250871655L,129422619L,129422619L,1498913921L,1250871665L,129422629L,129422619L,2080288012L,126412796L,244557495L,129422570L,246178613L,126412724L,244561567L,4488127205L,246178614L,1498913935L,1498913932L,1498913942L,1498913937L,1498913929L,1498913932L,1498913905L,1498913942L,1498913954L,1498913952L,1498913950L,1498913944L,1498913960L,1498913956L,1498913954L,5038682648L,246350428L,244564253L,5034691336L,4791291621L,1589598300L,244564250L,244564249L,4456032235L,3512141763L,246349041L,1250871624L,246348963L,246515936L,1428654105L,1428654108L,1428654101L,1517539498L,246516356L,1428654111L,244559289L,129422629L,246174653L);
    private List<Long> testListDenmark = Arrays.asList(5019237232L,469780099L,4927482418L,206374443L,663250422L,897640972L,663245130L,4198509740L,663250420L,663245130L,1029812181L,366141656L,366141630L,359179120L,366141484L,8422262277L,3562937754L,3562937737L,408989186L,1312078098L,258225608L,3753541069L,3753541069L,4996064390L,3782576413L,619872547L,8422272934L,8422229691L,8422229695L,8422229700L,8422229703L,8422229704L,8422262191L,8422262184L,8422262180L,1025225062L,8422262171L,8422262264L,3753541075L,8422262135L,3753541080L,3753541084L,3753541091L,1802660370L,4198378705L,661281057L,173976377L,671365163L,1773845798L,1773845753L,1139543871L,5019236311L,736284137L,5019236311L,729957524L,729957543L,339317546L,763258705L,8672632520L,729957520L,513866873L,513866868L,513866880L,513866920L,513866876L,763288530L,392780269L,595783361L,392780270L,595783360L,5763843746L,5150790737L,5150790735L,5150790735L,5150790733L,5150790741L,5150790739L,952628131L,5150790737L,7296714728L,5150790743L,952628166L,952628204L,8483085101L,432676681L,5150790836L,392744813L,5150790840L,5150790768L,1883681571L,747100149L,5150790865L,5150790889L,5150790891L,747100147L,747100146L,5150790895L,747100153L,5150790893L,8422285796L,3566543925L,250993979L,3254999177L,3254999180L,3254999179L,3254999178L,3254999188L,3254999177L,412732898L,3254999189L,1666015159L,1666015159L,3254999190L,3254999189L,252097071L,2046797712L,2035089732L,268695113L,1250198615L,268695110L,344544503L,2035089775L,1250198619L,2035090226L,2042977903L,268695219L,2043712694L,268695285L,379842067L,2066733501L,60271039L,268695374L,268695373L,2066733335L,445340048L,8422262025L,671365158L,671365168L,5019236253L,1773449887L,928189306L,1568949554L,1568949550L,60696060L,747100155L,3791966179L,3791966175L,3791966176L,3791966175L,3791966178L,250994002L,1237100941L,392744815L,258225613L,662991359L,513835110L,471568054L,3904840213L,571187901L,258850276L,2867429849L,258850432L,293017375L,60271636L,60691945L,774020296L,1250198629L,371214321L,268695111L,1250198635L,860470715L,247374954L,5849899009L,268695114L,445339958L,1250198641L,2043712790L,1250198633L,258849757L,340423657L,1250198625L,2042977846L,1250198623L,60691950L,3250983510L,3120897388L,3120897390L,173973747L,1023800949L,173973738L,173973746L,8422297135L,1023800791L,1023800610L,173973735L,305994699L,1023800574L,408989187L,1023801192L,401356727L,173973744L,1023800817L,587703084L,1023800256L,1023800170L,173973736L,1023800345L,173973734L,1023801205L,173973737L,1023801160L,691661272L,401356729L,1023800433L,173973748L,173973745L,8412649615L,4902421745L,354624147L,5840807802L,4198509537L,268842855L,97800351L,1033824428L,59134308L,59134302L,747098360L,713464830L,713464576L,713464403L,5218150428L,371218910L,713464441L,713464300L,3904906674L,713464584L,5218150426L,8050544138L,713464527L,713464545L,371218895L,713464448L,428912028L,5840808092L,8498066225L,8498066221L,6718345653L,6718345652L,6718345652L,729957537L,1569152593L,1569152587L,1569152584L,6814706074L,1569152600L,367533989L,355707343L,1569152607L,367534025L,1569152604L,367534002L,429292444L,5304695255L,587675029L,1033173301L,717565827L,587675045L,1033173109L,1033173109L,1033173294L,587675049L,717564070L,371222418L,1033173355L,1033173301L,3294573658L,1033173349L,587675063L,392780332L,738662644L,2346563107L,738662651L,738662649L,738662648L,738662647L,262340834L,392780337L,3294575564L,365957225L,632502642L,429292456L,747100147L,356497881L,747100144L,5150790865L,747100141L,7296714724L,5150790893L,747100152L,747100150L,747100149L,747100146L,747100141L,5150790895L,3791966177L,5150790889L,429284437L,747098417L,319265474L,429284418L,3123816569L,3904992936L,3904992954L,663245132L,663250420L,663250421L,897641389L,3217665475L,3294573634L,3251873996L,7405998521L,7405998522L,4147585584L,663246830L,663246836L,4927531299L,663246834L,663246846L,663246831L,663246832L,8140451123L,661281018L,663246835L,663245083L,663245084L,663245085L,663245086L,1415103455L,7141833887L,663245096L,1415103174L,1415103216L,250993975L,250993978L,661281136L,663245076L,663245101L,663245102L,7141833891L,663245091L,663245077L,663245092L,663245082L,663245091L,7141833900L,663245083L,663245103L,663245104L,897641017L,663245090L,897641128L,897641161L,4198509742L,663245139L,1278123861L,663246848L,717420690L,3904840181L,340078102L,3904840182L,3188308383L,3904782088L,3250967846L,3251874012L,3904868062L,3188299278L,3251873999L,3188299406L,3188299405L,6893512934L,3904868078L,3188299400L,3904868075L,6893512935L,3294573640L,408989136L,2035089841L,895489462L,401356719L,344542148L,344542143L,268695326L,268695375L,5151218769L,5151218768L,5151218766L,392780288L,5151218771L,5151218772L,392780281L,5151218811L,1809200822L,5151218810L,5151218814L,5151218812L,5151218812L,5151218825L,5151218823L,5151218827L,5151218845L,5151218829L,7296714722L,5151218839L,5151218832L,5151218815L,5151218824L,5151218823L,5151218826L,450200905L,440628242L,5151218833L,5151218840L,5151218833L,268684919L,842434758L,2046797855L,4996064371L,4996064358L,2046798116L,379842074L,401356735L,401356732L,379842072L,401356738L,1250612266L,1015731427L,370181625L,60271042L,379842065L,268695348L,60271038L,1139543836L,60696056L,408989134L,2046797640L,2046797651L,60271044L,5143609826L,293016699L,60696059L,5840807894L,60271045L,367430457L,4996011862L,2035090290L,2867429852L,2043712873L,3409475612L,412732898L,293016699L,2066733574L,412732896L,412732900L,5304669036L,383891082L,1237100957L,5368448227L,3904840229L,250993992L,2316163719L,250993987L,2359283713L,2359283714L,2359283713L,3807249541L,6510536758L,6510536766L,6510536765L,6510536764L,6510536763L,6946341266L,5801030570L,6510536758L,5801030586L,5801030577L,6510536759L,6510536749L,6510536757L,6510536756L,6510536755L,5801030608L,4217635887L,5801030605L,6946341265L,6510536777L,6510536776L,6510536775L,6510536774L,6510536773L,6510536772L,6510536771L,4217635881L,6510536767L,1339906265L,1250883781L,5303002241L,1025448425L,1250883783L,6141419324L,661245788L,6141419325L,6510550741L,6510550732L,7908228080L,6510550805L,5801030601L,6510550804L,1049597804L,1025224865L,356497837L,4064141767L,3123816548L,3767595932L,4507057468L,3767595936L,3767595936L,370181625L,1023801025L,5368448246L,252097072L,5368448243L,428912029L,428912030L,428912041L,392780273L,428912029L,428912035L,428912056L,687779106L,428912036L,428912037L,6814706050L,428912039L,6814706056L,530747055L,763258719L,428912044L,3123816572L,2685474929L,2685474927L,3904906701L,2685474934L,1708357716L,5023332513L,2685554224L,2685474920L,2685474922L,3251949063L,2685474937L,2685474935L,3904906707L,7405998528L,5023332515L,2453140742L,2685474986L,5023332495L,2685474989L,2685474992L,2685474995L,2685474975L,5023332506L,2685474983L,3251949068L,2685475002L,3904868076L,4161877115L,250993981L,4161877117L,4161877111L,250993980L,250993980L,4161877103L,1033000940L,340078100L,250993994L,412286166L,412286166L,345185696L,251575533L,3462081112L,1023279098L,345185692L,3904840231L,1023278511L,251575537L,345189546L,717420695L,4057846599L,345189562L,345189561L,345189560L,345189559L,345189566L,345189565L,412732871L,345189563L,8279083843L,345189540L,345189568L,345189567L,599649108L,1033097181L,379842097L,366068189L,379842102L,379842106L,379842101L,1033097355L,1033097357L,1033097032L,338904284L,8398334805L,8398334800L,1154737662L,8398334804L,8398334803L,371222493L,1033173355L,371222426L,371222431L,1033173135L,587675044L,1033173169L,1033173213L,371222420L,587675064L,1033173338L,587675052L,1033173169L,1033173269L,371222424L,717564077L,1033173074L,717564075L,1033173294L,1033173299L,5143608919L,367430410L,5143609821L,1025448425L,367430408L,367430443L,5143609822L,5143609830L,5143609833L,5143609828L,5849899035L,5143609833L,367430410L,5143609835L,5143609836L,4927531301L,5840808028L,4900394530L,250993984L,6351612634L,6351612635L,6351612636L,2863103319L,1025448408L,5303020836L,429292443L,4589992341L,5801030652L,4589992345L,4589992346L,5801030631L,440628242L,4996013112L,3753541085L,3251874014L,429284431L,5304669043L,5303033824L,392780341L,5303033828L,408989225L,1016538947L,1025448461L,1025448478L,173973747L,513866992L,305994695L,250993979L,392744808L,5840807941L,5840807971L,4900394531L,1237100964L,1237100957L,763258684L,8398334800L,60691950L,258225854L,429284416L,366836567L,429284416L,5303033822L,429284438L,429284439L,5304695144L,429292407L,429284443L,408989214L,8281105141L,429284437L,497318996L,884369235L,429284415L,2066774665L,2066774601L,3294575610L,429284425L,429284426L,1033000927L,8281100167L,429284455L,8281100159L,884369461L,884369430L,3904782072L,429284454L,429281368L,429281360L,7296714700L,429281358L,355707341L,429281369L,359179052L,429281375L,5151218840L,429281356L,429281354L,4900394539L,429281363L,1237100948L,8398334805L,429281387L,1020411795L,429281375L,429281385L,359179052L,790003335L,367534043L,790003337L,338903696L,366068186L,5303033827L,5303020834L,319265478L,8390858853L,429292409L,8390858852L,2066741111L,1094806320L,1397718955L,268695348L,1612148934L,473797984L,4927636392L,1612148936L,1612148935L,1019676606L,408989224L,1016538886L,5303033825L,366388470L,1244372730L,925141534L,1016539019L,3904840183L,1016538886L,884369274L,5304745274L,5304745272L,8281100207L,5304745259L,429284454L,408989214L,429284462L,8281105144L,408989208L,8281100172L,408989210L,429284462L,429284457L,8281100155L,429284442L,60271206L,2046797771L,445340070L,571187901L,1393995779L,1139543836L,60271628L,1139543819L,860470807L,445340075L,6718345662L,1139543867L,5303033821L,429292410L,3608679599L,8422262019L,371218891L,371218899L,1039693882L,1039693408L,1039693805L,1238623984L,345189535L,412732866L,412732868L,412732867L,412732870L,412732869L,345189564L,412732871L,1166787846L,1166787797L,412732899L,412732860L,5849898840L,6704331497L,6704331495L,6704331496L,7138540027L,6704331494L,293016259L,513866875L,1025224708L,1025225111L,1049597505L,1025225111L,842435259L,1049597505L,5849899021L,513866935L,1312078106L,8422262137L,4996013119L,1049597804L,513866935L,1025225034L,5849899022L,513866869L,1025224744L,1025225115L,1025224996L,513866876L,471568058L,2046808091L,2046798130L,2867429851L,2046798061L,2046798051L,471568060L,471568066L,471568047L,662991406L,471568052L,471568049L,471568042L,8680711764L,662991355L,344542638L,408989139L,634938641L,5304695126L,367042017L,471568083L,471568083L,471568076L,2046797962L,5302012725L,762374719L,471568062L,471568064L,471568063L,1031119508L,2046798015L,599624814L,3251873992L,356497839L,3254999191L,251575532L,371218912L,587675061L,1469941742L,1469941744L,1469941739L,1033173213L,1469941747L,1469941793L,1469941766L,1469941840L,1469941838L,1469941834L,1469941836L,1469941831L,1469941814L,429281393L,2834409734L,1027238415L,60696055L,390333336L,842434904L,250993998L,2066733465L,445340077L,60696061L,60696055L,60691945L,445340074L,8274267799L,1404913827L,5160988434L,5160988439L,692036214L,280877169L,842434829L,842434829L,280877165L,565466308L,5849898810L,2035090019L,1841830571L,1025448408L,1025448479L,429292443L,1025448479L,392780337L,1025448404L,1250883783L,2316167608L,2359283714L,4058391516L,8692696240L,8692696239L,8692696242L,8692696234L,8692696240L,8692696243L,8692696241L,8692696244L,8692696244L,8692696245L,8692696242L,8692696240L,8692696243L,8692696241L,8692696239L,8692696239L,8692696245L,4217635888L,3753541085L,3251874017L,713464521L,8071798313L,371218913L,888641124L,371218909L,371218885L,371218886L,371218887L,371218888L,888641076L,738662652L,3608678049L,371218892L,371218893L,713464601L,371218897L,371218898L,3608678052L,371218900L,371218901L,371218902L,371218905L,371218906L,371218907L,371218908L,371218909L,738662644L,4449209475L,1094806296L,258849761L,1094806309L,371214322L,1033173299L,1033173112L,1033173312L,3904840186L,371222418L,1033173162L,1033173296L,371222431L,717565821L,371222428L,2035089984L,2035089951L,2035090251L,2035089896L,513835132L,2035090498L,513835132L,2873682752L,1396504115L,258850419L,513835110L,513835113L,662991408L,268695109L,2035090475L,344544503L,513866911L,513866931L,513866867L,513866868L,513866963L,513866875L,513866949L,513866940L,513866942L,513866882L,3566543920L,173973740L,3624054495L,3624054499L,5690913916L,8412649609L,513866996L,513866998L,513866986L,401356743L,513866940L,3624054504L,1025225019L,513866949L,1025224772L,513866882L,513866865L,513866922L,513866920L,3983260709L,513866870L,513866906L,1025224910L,513866878L,1312078104L,262341754L,3409475610L,3409475615L,4984980153L,4996064405L,4996064420L,5049714848L,8491372146L,8422262120L,8491372148L,8491372146L,8491372150L,842435279L,8491372152L,8491372150L,8491372154L,4381055512L,3753541076L,3917293102L,691661193L,3753541089L,3917293104L,5763833418L,3904840232L,2623880387L,1098618773L,8483085100L,8483085101L,250994003L,4381055513L,842435413L,8491372152L,8491372154L,1278123862L,4381055512L,5086802628L,3462081114L,3462081114L,5270259410L,5270259414L,5270259394L,4217635882L,5270259397L,5270259406L,6510536760L,5270259409L,3123816582L,3123816582L,5270259400L,5270259401L,3123816585L,3123816584L,3123816585L,3123816577L,4217635882L,5270259398L,3123816580L,3123816580L,5270259412L,5270259413L,3123816575L,3123816575L,345189535L,3294573649L,5801030557L,5801030567L,428912055L,3123816555L,3123816556L,367042044L,747098421L,1033097466L,5304541757L,5840808026L,359178955L,340422884L,5840808091L,429281354L,258225613L,5840807816L,5840807785L,4900394542L,4900394544L,250993986L,747100155L,2316167608L,774020300L,1883681676L,356497880L,774020296L,4927531307L,936385603L,936385607L,1987892910L,5849899032L,5049714842L,262340832L,262340833L,262342042L,262342043L,1023800115L,71479975L,4927552556L,1023800121L,8390858858L,5840808070L,262340828L,513866869L,3626195869L,379842113L,1154697637L,355707337L,5840807786L,4139414960L,5840808035L,359178955L,8390858860L,359178951L,4902421744L,5840807960L,5840807935L,5840807799L,5840807942L,5840807798L,5840807814L,5840807913L,355707337L,5840807943L,5840807944L,8412649614L,5840807990L,5840808030L,5840807989L,5840808033L,4900367316L,5840808087L,5840808094L,5840808078L,5840808014L,5840808013L,5840807999L,4900367317L,71690922L,75900506L,5840808024L,5840808025L,5840807992L,359178951L,5840808081L,366941868L,5840808121L,5840808123L,5840808125L,5840808121L,5840808123L,5840808127L,5840808129L,5840808125L,359179158L,206373816L,5840808082L,267040735L,5840808071L,5840808069L,5840808062L,5840808068L,5840808075L,5840808076L,5840808073L,5840808071L,5840808077L,4927525221L,5840808067L,5840808071L,267040881L,5840808084L,5840808087L,5840808064L,5840808083L,5840808079L,5840808069L,5840808086L,8390858856L,5840808068L,8390858857L,5840808090L,5840808096L,5840808093L,5840808063L,5840808065L,1029812692L,5840808129L,1029812692L,75900509L,267041300L,1031119389L,408989188L,379842085L,4144590495L,1031119574L,1031119605L,3536711562L,379842085L,379842083L,379842098L,1033097400L,1033097044L,1033096963L,379842097L,379842104L,1033097092L,379842098L,379842108L,1033096900L,250993998L,60696060L,379842065L,60696059L,1568949556L,2042977781L,60696056L,2043017061L,379842068L,401356730L,1250612282L,1250612277L,305994705L,1031119641L,1031119602L,379842111L,379842124L,359179077L,379842124L,366388451L,379842122L,267040735L,1139543862L,5840807814L,5840807895L,5840807896L,1139543862L,5840807819L,5840807477L,4900394533L,5840807802L,75900504L,5840807481L,4900394533L,5840807480L,5840807818L,5840807806L,5840807803L,5840807479L,5840807478L,367532511L,5840807797L,5840807809L,71690925L,5840807469L,5840807476L,5840807802L,5840807941L,71690925L,5840807813L,5840807815L,5840807790L,5840807804L,5840807947L,5840807807L,5840807800L,5840807811L,355707337L,4900394533L,5840807469L,5840807813L,355707337L,8390858861L,5840807789L,247455277L,5840807933L,5840807471L,5840807474L,5840807945L,5840807482L,513867003L,401356744L,280877176L,5840807930L,5840807939L,5840807937L,5840807897L,5840807892L,5840807891L,5840807893L,5840807898L,1139543806L,5840807894L,1139543806L,206374443L,4104452188L,4104452189L,4104452190L,4197798402L,8680711760L,4104452187L,4104452188L,8671833739L,3767595919L,4064141791L,4507057470L,4064141791L,4064141779L,565466317L,1018305886L,497318998L,497318999L,392780324L,392780339L,1841830568L,319265480L,5160988435L,8422285792L,3562937744L,3562937748L,4381373315L,356497853L,250993982L,1386645168L,1386645159L,250993981L,1386645161L,1386645162L,1386645159L,1386645157L,1386645160L,1386645165L,250994004L,763288516L,469969321L,432676676L,1386645166L,1386645170L,1237100959L,1237100966L,2863103321L,2863103316L,365956661L,698973292L,698973267L,4197798399L,698973273L,470035143L,698973188L,619872547L,5019236300L,8422229710L,5200591277L,5019236294L,3782576411L,5019236319L,736284137L,5019237231L,5019236316L,3917293103L,5019237229L,5019236320L,5019236276L,5019236277L,5019236307L,5019236274L,5019236319L,5019236251L,5019236249L,3753541091L,173976380L,3753541080L,5019236248L,173976383L,5019236244L,5019236252L,173976377L,5019236309L,5019236297L,5019236310L,5019236298L,5019236310L,5019236295L,5019236299L,5019237230L,5019236301L,5019237233L,8422229716L,5019236279L,5019236313L,5019236308L,5019236308L,5019236310L,8422272923L,8422272922L,5019236305L,5019236308L,366068184L,408989217L,408989217L,471568044L,408989142L,1773449870L,3903600985L,366068188L,884369504L,247456339L,247456347L,5840807472L,5849899039L,5849899000L,247374952L,5160988438L,1404913827L,5849898815L,97799937L,97800211L,5849898832L,97800209L,8274267800L,5849898820L,5849898818L,5849898817L,8274267779L,5849898838L,97800209L,5849898838L,8274267778L,5849898839L,98000613L,97801655L,5849899016L,5849899015L,98000612L,5849899013L,97801656L,1139543868L,5840807904L,5840807908L,60271042L,60696056L,5049714835L,5849899028L,5049714843L,5849899032L,5049714836L,5049714838L,5849899031L,1025225099L,268842855L,8362517298L,5841493247L,5841493270L,5841493266L,8274267802L,8274267801L,8422297128L,692005392L,692005347L,5304668188L,392780328L,471568073L,429284437L,5304669034L,429284442L,5304695140L,5304695130L,429284431L,471568082L,429284426L,3294573648L,5304695208L,587675053L,371222433L,5304695195L,587675040L,7141833901L,7141833905L,7141833903L,7141833900L,7141833897L,7141833898L,663245087L,663245087L,7141833893L,7141833894L,7141833891L,7141833889L,7141833889L,663245089L,7141833887L,1415103283L,7141833905L,7141833903L,663245093L,7141833893L,2066692949L,2066692935L,2066692925L,2066692918L,2066692965L,2066692964L,2043017135L,2066692969L,2066692969L,2066692967L,2066692940L,2066692963L,2066692947L,2066692936L,371214320L,2066692941L,2066692944L,2066692947L,2066692940L,2066692936L,2066692977L,2066692997L,2066733653L,2066692724L,379842062L,2066733683L,1139543851L,2066692754L,2066692749L,2066692810L,2066692807L,2066692807L,2066692800L,2066692755L,2066692812L,2043017326L,2066741101L,2066741101L,2066733913L,2066741096L,2066741100L,2066741096L,2066741093L,2066741093L,2066741087L,2066741087L,2066741120L,2066741119L,2066741118L,2066741117L,2066741114L,2066741112L,2066741112L,2066734062L,2066741103L,2066741111L,2066741108L,2066741105L,2066741103L,2066741106L,1809200876L,2066734204L,2066741125L,1809200968L,2066741121L,2066733819L,2066733888L,2066733819L,2066733913L,1809200960L,2066733888L,2066733950L,1394001648L,2066734062L,2066734020L,2066692967L,2066692949L,2066734023L,662991344L,445340055L,2066692747L,445340054L,2066741100L,2066733736L,1022002966L,2066733709L,2066733780L,860470710L,2066733780L,408989137L,2066733382L,2867429845L,445340050L,2867429844L,445340051L,2066733382L,5849898830L,5849898838L,268842855L,1404913827L,661281193L,5849898761L,2066734133L,2066734040L,2066734100L,2066734097L,2066734017L,2066734163L,2066741121L,2066734204L,2066734120L,2066734147L,408989136L,8281100177L,8281100156L,5304745258L,408989206L,429284455L,884369548L,8281105137L,5304745276L,5304745270L,5304745274L,5304695149L,5304745272L,5304745270L,5304745270L,429284431L,3294575583L,1735013048L,392780271L,367534025L,1593575115L,6814706024L,6814706025L,355707343L,6814706025L,6814706028L,6814706031L,6814706030L,6814706029L,6814706032L,6814706026L,693320914L,6814706065L,6814706070L,6814706070L,6814706072L,6814706061L,1154698168L,1569152583L,367439782L,428912038L,763258711L,428912040L,6814706071L,1154697540L,3123816557L,3123816558L,3123816560L,3123816562L,3123816568L,4217635882L,3767595932L,7129468850L,2623880390L,3462081108L,6946341258L,3123816552L,6946341259L,8390858851L,3123816554L,8390858850L,4217637390L,4217635884L,5270259396L,3123816575L,3123816580L,3123816584L,3123816582L,371218886L,1397772486L,599649095L,359178980L,599649094L,497318997L,599649096L,5086802624L,5086802014L,5086802626L,5763841538L,8491372177L,5086802630L,5086801983L,5086802629L,5871020005L,5086802017L,5086802016L,5086802014L,5086802004L,5086802007L,5086802002L,5086802001L,5086802008L,5086802007L,5086802006L,5086802005L,5086802012L,5086802011L,5086802010L,5086802009L,5270260439L,5086802628L,5086802013L,5086801996L,5086801996L,5086802005L,5086801999L,5086802629L,8388411839L,4197798399L,8388411837L,366863154L,1098618542L,4927482418L,4927482419L,1883681572L,8388411843L,7296714717L,922817515L,747098431L,356497866L,5840807970L,1029826163L,763258723L,429281368L,4144590493L,4996064408L,5026173037L,4996064407L,4927531303L,4996064397L,4996064419L,4927531309L,3782576420L,5849899007L,4927533210L,4927533209L,5690913916L,513866865L,5690913917L,1029812574L,4927552556L,203633185L,4927552557L,565466287L,1031119601L,565466303L,565466305L,565466300L,565466297L,565466275L,565466273L,565466288L,1029850385L,565466274L,6351612636L,565466261L,565466259L,565466261L,1386645158L,565466260L,565466277L,565466339L,1031119370L,565466337L,4139320646L,390333338L,565467017L,2046797851L,1249887910L,1033824307L,565466348L,2046797964L,2046797927L,599624810L,4104436534L,565466297L,2046797752L,565466312L,565466340L,565467016L,619872546L,1773449876L,1773449878L,671365167L,1773449870L,1773845829L,1773449872L,173973750L,1312078101L,1312078095L,1025225011L,513866880L,1320059510L,4927578099L,1237100948L,5840807995L,5840808007L,1237103706L,471568042L,663246833L,4104452191L,4197798410L,471568043L,5150790746L,4927636393L,4927636394L,4927636395L,106078594L,884369432L,5304745279L,8281105139L,471568086L,705481804L,884369278L,429284459L,3904782071L,884369278L,392780332L,884369274L,1025224864L,8422262125L,1773845798L,842435280L,842435279L,842435280L,8491372148L,842435360L,842435413L,842435360L,842435421L,842435360L,4381055513L,842435262L,842435413L,842434808L,842434826L,842434828L,4144590494L,842434826L,60271636L,1033824312L,379842055L,747100154L,390333337L,3904782074L,5023332514L,2685474996L,2453140746L,2685474989L,2685474996L,2685474989L,339317541L,1415103367L,4147585584L,4984980152L,258849750L,4996013066L,97800353L,97800354L,4374190073L,2043712742L,339318166L,1237067458L,367439779L,470094910L,356497868L,339317544L,339317543L,3608679599L,8491372165L,691661132L,691661193L,691661278L,691661118L,8422262115L,262340835L,691661132L,565466338L,423247700L,359178981L,1027238039L,1027238410L,1027238410L,1027238454L,1027238095L,1027237901L,1027237982L,1027237978L,1027238415L,1027237908L,392744815L,842434933L,2046797665L,4139414960L,2046798031L,3917293105L,3753541086L,3251874006L,5019236256L,3753541084L,5019236254L,3251874017L,3753541073L,5019236320L,3753541075L,5019237221L,359179038L,775591769L,392780317L,775591760L,775591761L,392780320L,775591770L,1154737689L,1154737658L,1773845794L,8422262033L,1773845782L,8491372160L,1773845790L,1773845786L,1773845790L,1773845767L,1773845794L,1773845773L,1773845786L,1773845754L,1773845752L,1773845782L,1773845750L,1773845773L,1773845838L,1773845835L,1773449887L,1773845838L,1773845829L,1773845832L,1773845826L,1773845836L,1773845835L,1773845757L,1773845754L,1139543871L,1773845767L,1773845744L,1773845748L,1773845752L,8422262037L,1773845750L,1773845746L,8177786721L,2035090343L,2035090381L,763258716L,429281395L,1237100979L,1237100939L,4900394543L,1237100974L,8390858866L,5150790743L,2863103315L,1237100979L,392780271L,595783360L,250994005L,470035150L,379842093L,379842070L,1023800548L,5049714839L,4064141784L,4507057469L,4507057471L,4507057472L,4064141771L,3767595922L,4064141768L,3536711542L,3536711548L,3536711546L,3536711543L,3536711541L,4064141761L,97799937L,258849401L,599624123L,258225608L,599624121L,599624133L,599624126L,599624126L,367439782L,471568069L,599624812L,2046797961L,599624813L,2046797988L,599624812L,565466304L,1094806367L,1809200860L,1033824405L,1033824340L,280877161L,390333340L,379842095L,1031119337L,599649092L,5840808034L,599649093L,1018305884L,258849750L,1250198638L,445340066L,1250198640L,3904782077L,3904782075L,3904782074L,3536711554L,3904782077L,429284458L,3536711559L,429284457L,3904782070L,661280855L,3250983511L,3904782083L,3904782084L,3904782078L,3904782076L,3904782080L,663246847L,839825013L,692005305L,1708357725L,3188299397L,2685475051L,3188299398L,3904868072L,3904868071L,1708357723L,3188299399L,1708357721L,3188299401L,692036318L,692036363L,1415103359L,250993978L,663246845L,692036191L,1029826180L,359179039L,4381373315L,356497849L,2834312218L,2834311796L,5368448238L,293014666L,1569152584L,356497881L,957178678L,356497883L,470035156L,356497866L,367532511L,356497863L,355707339L,356497856L,1029826336L,356497856L,356497863L,3250967841L,3904840188L,3904840187L,587675066L,3188308385L,3188308384L,3188308383L,3904906351L,3904840229L,1023278900L,3904840225L,3904840224L,3904840217L,3904840216L,6568596074L,2623880386L,3904840207L,3904840201L,3904840193L,3294573655L,5840807915L,5849898997L,5849899006L,4927533209L,5849898996L,345185693L,8491372179L,2623880389L,2685474921L,2685474965L,345185694L,3904906675L,3462081115L,3904906677L,3904906681L,2685474922L,661280877L,661280858L,661280988L,4198509537L,5841493268L,268842810L,5849898850L,661246341L,663245137L,663245138L,3123816551L,1094806407L,258849768L,280877176L,379842064L,280877016L,371214320L,2066733950L,1094806422L,1139543875L,1094806390L,2685474946L,587729776L,3904992935L,587729776L,3904992937L,3904992938L,3904992939L,3904992940L,3904992944L,3904992943L,3904992947L,3904992946L,3904992950L,3904992951L,3904992952L,8134288842L,5136252886L,262340826L,717420693L,8279083890L,717420695L,8279083888L,6854025327L,4057846598L,8279083889L,8390858862L,5840808008L,429281385L,3251873997L,3251873995L,250993990L,293016259L,250994002L,59134311L,59134311L,60696058L,60691945L,60696050L,60271636L,5801030606L,6510536778L,6510536779L,4217635887L,5801030604L,5801030601L,7908243590L,4217635881L,5801030628L,5801030627L,5801030634L,7908243589L,7908228081L,7908243589L,7908228076L,5801030632L,5801030634L,8692696277L,7908228074L,6510550806L,3123816558L,5801030560L,5801030559L,5801030566L,8134298266L,6583811376L,5801030567L,5801030562L,5801030561L,5801030564L,5801030563L,5801030568L,6510536762L,5801030572L,5801030571L,6510536749L,6510536761L,6510536760L,4217635874L,6510536776L,7405998513L,5801030603L,5801030588L,5801030587L,1033173359L,587675063L,1033173312L,717564096L,587675047L,1033173269L,3188299278L,3250986914L,3188299671L,401356719L,344544010L,2042977903L,247374954L,3904782069L,3152958018L,371218885L,1036344529L,736284134L,1036344611L,1036344545L,1036344590L,2035089847L,379842067L,371214321L,258849765L,445340056L,860470813L,5840807814L,5840807787L,5840808156L,440628241L,1883681571L,763294985L,1883681679L,774020308L,1883681677L,1883681678L,1883681689L,1883681688L,774020308L,1883681684L,1883681691L,1883681693L,3421191661L,3250983509L,6893578455L,3250983508L,3429875145L,3188299404L,1016539027L,860315557L,860315600L,1020411754L,860315628L,2834312018L,356497851L,356497852L,5368448240L,5150790740L,250994003L,952628166L,952628181L,5150790739L,5150790733L,5684198322L,8173725642L,583541671L,258849401L,293012126L,583541684L,583541662L,583541680L,1397774517L,513835179L,661280966L,2035089731L,1841830629L,1841830658L,1016539019L,408989224L,366388486L,1250883782L,258850433L,3787995605L,691661118L,3787995605L,2881586103L,3188299669L,4996011918L,4996011916L,4996011894L,4996013041L,4996013041L,4996013027L,4996013041L,4996013048L,4996013028L,4996013027L,4996013025L,4996013024L,4996013156L,4996011917L,4996013054L,4996013049L,4996013052L,265519087L,4996013054L,4996013024L,4996011860L,4996013052L,4996011915L,4996013093L,4996013154L,4996013045L,4996013040L,4996013027L,4996013024L,661280877L,4996013032L,4996013151L,4996013155L,4996013042L,4996013107L,4996013055L,4996013158L,251633243L,4996013057L,4996013043L,4996011908L,4996013156L,4996013050L,4996013060L,4996013058L,4996013046L,4996011906L,4996013091L,4996013105L,4996013097L,4996013092L,4996011900L,97801654L,4996013108L,251633243L,4996013154L,4996013059L,445340155L,4996013021L,253082130L,4996013022L,4996013021L,4996013021L,4996011920L,4996013112L,4996013157L,1025224740L,1025224740L,265519087L,253082130L,4996011919L,4996011862L,4996011859L,4996013047L,4996011861L,4996011903L,4996011896L,4996011895L,4996011905L,4996011904L,253082130L,4996011901L,4996011898L,4996011897L,60271042L,2066733771L,860470893L,60696051L,2043017082L,5849898835L,1250198604L,860470807L,3251874008L,4996064391L,8422262284L,562662721L,4996064406L,4996064363L,4996064390L,4996064386L,4996064384L,4996064385L,4996064387L,4996064361L,4984980154L,4996064378L,4996064354L,4996064392L,562662719L,4996064391L,408989170L,4996064404L,3782576417L,4996064381L,4996064399L,4984980158L,4996064359L,98099244L,4996064364L,4996064362L,4996064355L,3782576417L,4996064357L,4996064360L,4996064356L,4996064361L,4996064361L,206374439L,206374439L,4996064389L,4996064380L,4996064388L,4996064360L,206374439L,5150790767L,432676679L,952628181L,432676680L,432676675L,763288512L,392780268L,1098618773L,432676549L,250993989L,1098618630L,3294575568L,1029812065L,2043712561L,5849898816L,662991354L,1025224744L,5019237222L,1025224865L,1025224769L,727468844L,4996064396L,1016538915L,587675069L,3188308381L,884369252L,5840808080L,206373845L,251575531L,379842093L,3429875144L,3536711557L,3421191661L,4064141766L,842434890L,3536711573L,4064141764L,4064141762L,3536711571L,4064141763L,268695477L,513835128L,513835128L,268695115L,513835173L,513835140L,268695219L,2043017563L,2035090176L,2035090290L,2035090182L,2035090040L,2035090085L,2035090082L,1428123918L,2035090132L,2035089982L,2035090001L,513835135L,513835169L,513835135L,513835169L,513835179L,2035089939L,513835173L,2035090080L,2035089976L,2035089905L,268695217L,513835199L,2035090404L,5684198322L,2867429839L,583541658L,5885496413L,1393995778L,1397718950L,367430443L,1397718956L,1397598746L,1397718950L,1397718954L,1397718951L,1397718943L,661246001L,661245842L,661246372L,1397772495L,1397772496L,8176199603L,5885496413L,1397772493L,1397772486L,1397772488L,1397772494L,908650547L,344544716L,2043707353L,344544488L,344544716L,2043707264L,1397774538L,1397774531L,1397774535L,1397774519L,1397774545L,1397774533L,1397774519L,1397774523L,583541671L,1397774517L,1397774530L,5840808085L,1397780203L,262342040L,262342039L,1397780207L,1397780215L,1397780217L,583541675L,1397780203L,1397780204L,367430415L,443722791L,251575533L,445339957L,2043712925L,2043712917L,2043712917L,1250198636L,2043712842L,4089023838L,2043712790L,2043712842L,2043712694L,2043712742L,445339956L,2043712633L,2043712633L,2043712645L,268695269L,268695285L,2043712826L,2043712781L,2043712736L,2043712705L,2035089841L,2035090226L,2035090082L,2035090271L,2035090182L,2043712921L,2043712907L,5303033829L,587675036L,5304695201L,340078102L,408989216L,1020412022L,1020411423L,392780305L,359179048L,1020411498L,392780292L,5368448237L,392780302L,1020411583L,1020411559L,1020411519L,359179044L,429281377L,356497847L,3251815012L,429281383L,3251815008L,251575539L,3251815011L,3250967847L,1020411681L,392780304L,1020411834L,392780299L,860315682L,860315691L,1020412088L,1020411975L,392780296L,392780280L,662984075L,577104585L,3294575565L,1029812635L,577104581L,366141499L,897634394L,1154697672L,1154698037L,790003335L,1154698286L,1154697439L,1569152583L,1154697824L,367533989L,1154698151L,1154697691L,1154697582L,367534002L,339317542L,6814706072L,1154698127L,765705401L,1154697672L,1154697866L,1154697908L,1593575115L,1154697970L,1154698247L,1154698163L,428912036L,687779065L,1708357711L,3251873987L,2532611404L,3904868066L,3251874015L,3251874001L,3904868081L,3217665474L,367430425L,928189309L,1568949552L,1568949552L,6790798208L,1708357718L,4095415142L,3251874003L,3251874000L,3251874013L,4058391516L,1708357720L,3188299402L,2685474914L,3251873989L,4217635872L,3188299403L,3251873994L,6946341275L,4518595038L,3251873988L,6790798207L,3904840240L,4086644594L,4086644595L,4058391517L,4996013112L,775591766L,60691950L,775591763L,5151218769L,1238623981L,4057846600L,345184223L,251575536L,7405889214L,2685474969L,3251873990L,8360866885L,5849899027L,5849899018L,5049714840L,97800351L,4996013060L,5841493283L,4374190072L,4996013153L,8360866887L,5841493269L,97799937L,97800209L,492094430L,4064141761L,492094429L,492094435L,492094437L,492094431L,492094432L,492094434L,60691951L,8176159310L,2066733736L,2066741114L,2066741125L,1809200849L,1809200841L,1809200833L,280877172L,1809200848L,1809200829L,1809200825L,1809200860L,2066733671L,1809200823L,443722855L,1809200824L,1809200822L,1809200823L,1397772488L,319265480L,1841830676L,1016538851L,359179077L,359178986L,366388450L,366388450L,366388453L,5849899019L,262341756L,5801030565L,5801030558L,8134288848L,8134288849L,8134288853L,8134288854L,8134288851L,8134288852L,8134288855L,6583811365L,8134288854L,3904992956L,634938641L,471568082L,634938641L,4996013029L,4996013113L,5849898831L,4198509551L,661281046L,4198509536L,661281046L,661245812L,663245075L,663245078L,661281010L,661281136L,1415103132L,661280981L,5026173037L,1415103325L,663246845L,250993976L,250993976L,1415103417L,692036276L,692036191L,1415103362L,663245079L,8422272935L,371218914L,945394128L,2066692747L,366388453L,565466321L,2685554224L,345185694L,1023279641L,7405998518L,8491372178L,692036184L,663246846L,4057846241L,3904840188L,412732862L,345189552L,345189557L,5801030609L,6510550741L,5801030627L,7908228081L,7908228073L,5801030626L,7908228077L,7908243591L,6510550804L,7908228075L,7908228070L,7908228072L,6510550804L,7908228073L,888641113L,366388451L,849595832L,925141535L,356497837L,643710605L,1134314439L,5019236312L,842435247L,173976384L,8491372168L,5019236250L,1023800474L,1023800904L,1023800292L,1023800782L,513866992L,1023800397L,1023800202L,1023801058L,1023800707L,1023800358L,1023801259L,305994695L,1023800622L,3562937791L,3562937787L,3562937753L,3562937762L,408989183L,8412649608L,3562937750L,6436577522L,3562937752L,3562937740L,3562937749L,3562937744L,3562937745L,3562937743L,6436577525L,3562937746L,8422285793L,3562937742L,3562937738L,3562937742L,3562937739L,3562937741L,408989186L,3562937738L,3562937791L,3562937787L,3562937786L,3562937780L,3562937783L,3562937780L,3562937770L,3562937786L,3562937774L,3562937770L,3562937774L,408989183L,3562937758L,619872548L,3562937766L,3562937765L,3562937759L,7908228078L,7908228077L,7908228071L,586956430L,692036276L,366388456L,3120897392L,206373826L,587675069L,2685474929L,366068188L,3188308385L,206373826L,3123816551L,429284432L,5840808095L,365957225L,319265474L,429292409L,206373848L,408989149L,258850422L,344544488L,5841493267L,5840808089L,206373848L,367042021L,897634351L,408989175L,5049714849L,408989179L,408989170L,408989182L,408989166L,408989179L,408989168L,408989171L,3562937751L,5143609836L,344544010L,2066733709L,1139543821L,6262861023L,1395421888L,1094806410L,340078102L,366068186L,1244372729L,408989219L,1841830596L,1016538766L,1312078098L,173973739L,1031119443L,1031119649L,5304745259L,8281100209L,1029826267L,8281100208L,1029826235L,1029826092L,8281100198L,8281100158L,250993990L,75900507L,252097071L,354624157L,1029812424L,340422877L,365956661L,5840807470L,267041303L,1029812280L,1029812506L,383891071L,497318999L,383891084L,383891083L,5302064423L,383891085L,366836567L,8671833743L,497319000L,1397563960L,356497857L,1029826241L,860315557L,1029826167L,1029826303L,4900394538L,408989209L,1029826213L,408989213L,1029826086L,1029826163L,1029826328L,775591770L,1029826086L,408989212L,356497859L,4198509530L,1415103060L,251575541L,3188299671L,1029850253L,1029850363L,1029850280L,1386645154L,565466278L,513835128L,8422229712L,3562937754L,250993986L,2833403700L,2833403712L,3250983507L,3536711557L,390333342L,8390858863L,1569152591L,6516114826L,366068182L,6516114827L,8692696266L,5270259403L,4217637391L,4217635874L,4217635876L,4217635877L,5270259395L,3904840240L,5801030586L,4217635874L,4217635879L,5270259392L,5270259391L,6510536768L,5801030589L,4217635876L,5270259407L,3123816581L,8235903291L,8235903292L,432676675L,8235903290L,4104452191L,75537489L,3123816550L,3904906352L,3123816549L,3904840223L,2623880385L,897634369L,366141482L,367430408L,583541675L,1397758655L,928189310L,1397758658L,367430425L,390333335L,367439805L,599624131L,1154697783L,367439807L,4058391514L,3753541082L,4215879562L,6814706032L,693320912L,1569152587L,4637289009L,250993984L,4637289009L,4637289010L,250993996L,1569152605L,786888790L,367533991L,1569152594L,1154697732L,1154697500L,367534008L,1569152602L,355707338L,359179108L,359179108L,359179075L,897634383L,359179071L,359179082L,359179082L,379842126L,359178986L,5840807805L,4461897767L,440642764L,392780290L,359179052L,359179046L,4461897770L,359179055L,359179071L,383891071L,392780319L,356497853L,392780292L,5840808127L,423247700L,1018305888L,1018305906L,5840808035L,8390858859L,1237100941L,250994003L,698973188L,471568042L,8388411836L,392744817L,6704331493L,5151218811L,250993990L,60696058L,250994002L,2867429838L,390333332L,1395421896L,2046808154L,268695215L,2066733465L,1568949556L,392780328L,705481798L,392780330L,392780329L,5304695129L,8390858855L,392780319L,392780324L,5304668190L,392780325L,319265476L,1735013067L,5303020119L,497319000L,1735013049L,1020411966L,392780295L,392780297L,1020411634L,1020411376L,1020411707L,392780303L,392780284L,4900394541L,392780290L,6814706022L,1020411884L,1020411578L,392780314L,392780313L,392780316L,392780315L,775591764L,1029826213L,392780316L,392780319L,359179039L,1020411605L,359179038L,392780308L,392780307L,392780312L,392780309L,392780268L,250993979L,1237103712L,595783359L,392780280L,392780283L,729957529L,392780281L,544461078L,392780283L,392780285L,392780274L,428912035L,392780276L,6814706052L,392780278L,392780277L,392780282L,392780279L,2685474920L,2685474952L,2685474963L,2685474991L,5023332505L,2685475000L,2685474963L,661245829L,4198509540L,1415103093L,661245916L,661245890L,661245816L,661246056L,661245899L,661245916L,6141419324L,661245871L,661245851L,661245842L,661245860L,3294573639L,661246220L,661246281L,661246209L,661246194L,661246281L,661246390L,661246372L,661246176L,661246337L,661246360L,4198509567L,661246349L,5155840218L,661246042L,661245890L,5155840196L,661246032L,661245987L,661245976L,661245976L,661246009L,5155840195L,661246020L,661246380L,661246020L,661246144L,661246090L,661246124L,661246162L,661246124L,1735013049L,1735013065L,1735013062L,1735013067L,1735013062L,1735013065L,392780340L,1735013066L,3294575562L,5304756122L,661245812L,661281092L,1415103126L,661281081L,5159116773L,661281102L,661281057L,661281070L,661281027L,661281060L,661281037L,97800351L,4198509519L,661281070L,4198378705L,661280897L,5159116765L,1415103064L,1415103105L,661281010L,661280981L,1734504503L,2873682756L,661280966L,1415103128L,4996013132L,5840808052L,1029812775L,5840808088L,267040881L,1022002966L,945394128L,4008429938L,4008429937L,1386645157L,4008429940L,4008429939L,1025225145L,250994000L,747100148L,7296714724L,7296714722L,7296714720L,7296714727L,7296714728L,250994000L,7296714726L,429281362L,7296714719L,7296714720L,60691951L,6893578454L,842434890L,871116200L,513867003L,2046797842L,401356740L,401356734L,401356737L,1250612314L,401356740L,1809200969L,6814706062L,1250612307L,1250612279L,401356734L,305994699L,1023800352L,370181625L,401356730L,401356728L,3566546416L,1394001649L,2066692724L,8422262039L,5849898994L,173976391L,60271044L,5840807895L,60271043L,571187905L,1139543820L,293014454L,60271045L,7557105704L,7405998544L,7405998546L,7405998518L,587729771L,6583811375L,6583811373L,6583811361L,6583811370L,6583811369L,6583811372L,6583811371L,6583811364L,6583811363L,6583811366L,6583811365L,8097286672L,6583811354L,6583811375L,7405998520L,6583811361L,6583811359L,6583811360L,6583811360L,6583811359L,6583811354L,6583811353L,6583811360L,6583811342L,6583811352L,8672632521L,8672632517L,8672609916L,8672609915L,8672632519L,1380489683L,2043707264L,6262861023L,2867429849L,471568047L,268695477L,266454753L,445340058L,258849766L,1094806376L,8496527786L,8496527785L,258849763L,258849758L,1250198607L,258849754L,258849753L,1250198648L,258849755L,258849752L,4927636395L,470094910L,8672632522L,8672609899L,8672632520L,8672609905L,8672632518L,8097286884L,5270260441L,7405998545L,3123816557L,7405889212L,7405998528L,7405998527L,7405998526L,7405998525L,7405998524L,3251873996L,2881586103L,8097286866L,7405889213L,7405998519L,6510536765L,262340824L,5840808076L,544493547L,5840807473L,5849899038L,513866900L,8412649611L,8412649607L,3562937737L,258849762L,258849765L,4589992346L,3462081108L,408989191L,305994471L,305994471L,8177786721L,106078594L,8177786719L,8177786720L,860315628L,2834312090L,2834312094L,2834312218L,1020411364L,1154697439L,7557105709L,7405998547L,3904906343L,766752587L,366388456L,5086802018L,2834409725L,2834409726L,2834409729L,2834409730L,2834409734L,2834409731L,5151218829L,4374190074L,8498066227L,8498066223L,6718345653L,429281351L,470059799L,6718345656L,6718345657L,6718345658L,6718345659L,6718345660L,6718345661L,6718345662L,60696050L,4996064412L,8422285763L,8412649598L,262340829L,8422262162L,5019237228L,3562937783L,8680711762L,367430422L,359179050L,1020411597L,4461897767L,4461897770L,3294573654L,392780288L,544461079L,5150790840L,1708357714L,5840807801L,4996064401L,4996064389L,5019236243L,4984980157L,4996064413L,5019237223L,1018305920L,379842083L,379842089L,379842087L,1031119324L,1031119618L,379842081L,565466302L,471568070L,1031119501L,379842090L,1031119673L,1031119677L,1031119493L,379842079L,1031119424L,1031119632L,565466337L,1031119644L,1031119320L,1031119609L,408989189L,1031119651L,4008429937L,8235903290L,957178678L,544463519L,8680711765L,1098618616L,774020300L,4647110131L,8680711761L,250993992L,1098618488L,250993992L,4637288989L,250993995L,470059802L,250993997L,250993994L,432676680L,663245075L,4161877117L,1386645143L,565466287L,663245078L,8390858864L,4938734224L,8680711763L,408989134L,1030044512L,599624121L,583541658L,293012126L,293012522L,293012523L,293012522L,293012124L,60271038L,293014666L,356497849L,1015731427L,371218884L,371218889L,717420681L,717420678L,717420687L,849491407L,251575534L,412732859L,251575535L,3782576412L,2833403712L,1098618553L,432676549L,1098618342L,6092314435L,250993988L,432676548L,106078594L,1029812024L,5368448254L,5368448253L,2046797683L,4618423716L,5368448249L,2046797705L,5368448251L,5368448246L,5368448245L,5368448248L,5368448249L,5368448242L,428912028L,428912027L,5368448243L,293014791L,5763844847L,5368448240L,643710605L,5368448236L,5368448235L,5368448230L,5368448237L,5368448230L,5368448227L,693320914L,4996064398L,4984980150L,8360866893L,4996013114L,262341756L,5049714832L,247456346L,247456340L,513866821L,5849899033L,5849899030L,5049714831L,262341754L,262341754L,5049714832L,4647110131L,2316163718L,583541662L,345185695L,7557105705L,5086802631L,8491372167L,671365163L,8491372159L,1773845753L,6704331493L,5150790740L,392744819L,250994000L,470035145L,4197704477L,392744819L,3904906658L,367439807L,339317541L,428912043L,763258692L,428912045L,763258711L,392780275L,599624136L,6814706033L,729957540L,763258723L,763258684L,6814706079L,1237100985L,4927578100L,763258713L,763258690L,763258690L,729957537L,106078580L,4855548078L,3251815015L,3251815007L,412732863L,251575538L,412732861L,1238624004L,3914345832L,412732860L,7736150859L,7736150858L,251575530L,763294972L,763294973L,763294968L,763294971L,763294967L,763294984L,763294983L,338904281L,763294974L,763294964L,763294973L,763294983L,763294995L,763294949L,763294985L,763294971L,763294989L,763294974L,763294978L,763294981L,763294968L,763294969L,763294976L,763288538L,763288517L,763288512L,595783359L,763288505L,763288538L,250994004L,1386645177L,2863103319L,763288529L,763288517L,1249887913L,60271223L,1249887921L,1249887912L,60271216L,1249887908L,565466315L,2046797833L,1249887927L,1249887925L,1249887911L,1249887935L,1249887914L,1249887930L,1249887929L,2046797701L,1025224858L,379842075L,471568058L,471568060L,471568056L,401356731L,471568062L,4105855514L,379842077L,379842077L,471568071L,379842092L,599624816L,2046797937L,599624810L,565466304L,2046797865L,2046797852L,2046797851L,4147317196L,2046797849L,565466318L,565466320L,2046797849L,401356740L,2046797842L,60271223L,2046797771L,1249887923L,2046797719L,2046797753L,2046797728L,2046797717L,5368448251L,2046797677L,2046797685L,445340072L,2046797683L,565466313L,359179090L,5368448254L,60696052L,60696062L);
    private boolean drawBlue = false;
    private int redDrawAtPointX;
    private int redDrawAtPointY;
    private int blueDrawAtPointX;
    private int blueDrawAtPointY;
    private long chosenLandmark = -1;
    private HashMap<Long, List<Edge>> reducedAdjList = null;
    private HashMap<Long, List<Long>> from = new HashMap<>();
    private HashMap<Long, List<Long>> to = new HashMap<>();

    public HashMap<Long, List<Edge>> getAdjacencyList() {
        return adjacencyList;
    }

    private HashMap<Long, List<Edge>> adjacencyList;
    private HashSet<Long> seenWaysToDraw = new HashSet<>(testListMalta);


    /*
    * Contructor
    *
    * */
    public GraphOfNodes(XMLParserImpl parser) {
        this.parser = parser;
        ways = new ArrayList<>(parser.getWays().values());
        this.bufferedImage = new BufferedImage(fullResolutionX*routeFactor,fullResolutionY*routeFactor,BufferedImage.TYPE_INT_ARGB);
        this.ballImage = new BufferedImage(fullResolutionX*(routeFactor),fullResolutionY*(routeFactor),BufferedImage.TYPE_INT_ARGB);
        //this.consideredImage = new BufferedImage(fullResolutionX*routeFactor,fullResolutionY*routeFactor,BufferedImage.TYPE_INT_ARGB);
        this.prerenderedImage = new BufferedImage(fullResolutionX*8,fullResolutionY*8,BufferedImage.TYPE_INT_ARGB);
        viewLimiter = new ViewLimiterImpl(ways, parser.getNodes());
        nodeFinder = new NodeFinderImpl();
        setBackground(Color.WHITE);
        for (int i = 0; i<viewResolution; i=i+100){
            for (int j = 0; j<viewResolution; j=j+100){
                Point point = new Point(i,j);
                tilePoints.add(point);
                //if(i/tileRes %2 == 0 & j/tileRes %2 == 0 | i/tileRes %2 == 1 & j/tileRes %2 == 1) {
                //    BufferedImage biggerImage = new BufferedImage(800, 800, BufferedImage.TYPE_INT_ARGB);
                //    tiles.put(point, biggerImage);
                //    tileZoom.put(point,1.0);
                //}
                //else
                    tiles.put(point, new BufferedImage(tileRes,tileRes, BufferedImage.TYPE_INT_ARGB));
                tileZoom.put(point,1.0);
            }
        }
        viewLimiter.setMargin(); //finds lowestXY and highest XY
        yOffset = (int) viewLimiter.getLowestY();
        xOffset = (int) viewLimiter.getLowestX();
        windowScale = viewLimiter.calculateScale(viewResolution);

        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                zoomable = false;
                pressedX = e.getX();
                pressedY = e.getY();
                if(e.getButton() == java.awt.event.MouseEvent.BUTTON2){
                    //####TEST OF VIEWLIMITER#####
                    System.out.println("################testing viewLimiter################");
                    System.out.println("Before: " + ways.size());
                    viewLimiter.setMargin(0,0);
                    ways = viewLimiter.limitToRelevantWays(scaleValueXNoZoom(redDrawX), scaleValueYNoZoom(redDrawY), scaleValueXNoZoom(blueDrawX), scaleValueYNoZoom(blueDrawY), xOffset, yOffset, windowScale / fullResolutionFactor);
                    System.out.println("After: " + ways.size());
                    isGraphDrawn = false;
                    clicked = true;
                    repaint();
                }
                if(e.getButton() == java.awt.event.MouseEvent.BUTTON3){
                    if (firstClick) {
                        clicked = true;
                        drawX = (int) (e.getX()*fullResolutionFactor);
                        drawY = (int) (e.getY()*fullResolutionFactor);
                        firstClick = false;
                        //System.out.println("redrawing");
                        //isGraphDrawn = false;
                        repaint();
                    } else {
                        clicked = true;
                        drawX = (int) (e.getX()*fullResolutionFactor);
                        drawY = (int) (e.getY()*fullResolutionFactor);
                        firstClick = true;
                        //System.out.println("redrawing");
                        //isGraphDrawn = false;
                        repaint();
                    }
                }
            }
            @Override
            public void mouseReleased(MouseEvent e){
                zoomable = true;
                mouseReleased = true;
                repaint();
            }
        });
        addMouseMotionListener(new MouseAdapter() {

                                   @Override
                                   public void mouseDragged(MouseEvent e) {
                                       //boolean notOutsideX = imageX + e.getX() - pressedX + 1300 <= currentResolutionX;// & imageX + e.getX() - pressedX >= 0;
                                       //boolean notOutsideY = imageY + e.getY() - pressedY + 1000 <= currentResolutionY;// & imageY + e.getY() - pressedY >= 0;
                                       //if (notOutsideX)
                                       //if (notOutsideY)
                                       //if(e.getButton() == java.awt.event.MouseEvent.BUTTON1){
                                            imageX += (pressedX - e.getX())/zoomFactor;
                                            imageY += (pressedY - e.getY())/zoomFactor;
                                       //}
                                       pressedX = e.getX();
                                       pressedY = e.getY();
                                       repaint();
                                   }
                                });
        addMouseWheelListener(new MouseAdapter() {
            //Broken zoom stuff
            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                if(e.getWheelRotation() > 0) {
                    zoomFactor = 0.95 * zoomFactor;
                    //zoomFactor = Math.pow(zoomFactor, 0.80)-0.05;
                    zoomFactor = Math.round(zoomFactor*1000.0)/1000.0;
                }
                else if (e.getWheelRotation() < 0) {
                    zoomFactor = 1.05 * zoomFactor +0.01;
                    //zoomFactor = Math.pow(zoomFactor, 1.20)+0.05;
                    zoomFactor = Math.round(zoomFactor*1000.0)/1000.0;
                }
                repaint();
            }
        });
    }

    public void setRouteToDraw(List<Long> path, Color color) {
        //System.out.println("Received List: "+ redPart);
        //List<String> nodeIds = Arrays.asList(redPart.split("\\s+"));
        //List<String> nodeIdsNOSPACE = nodeIds.subList(1, nodeIds.size()); //remove head of list as it is an identifier

        //Collections.addAll(path,nodeIdLongs);

        //for(String id : nodeIdsNOSPACE) {
        //    nodeIdLongs.add(Long.parseLong(id));
        //}

        //for (CustomNode node :                parser.getNodes().values()) {
        //    nodeIdLongs.add(node.getId());
        //}

        this.bufferedImage = new BufferedImage(bufferedImage.getWidth(),bufferedImage.getHeight(),BufferedImage.TYPE_INT_ARGB);

        //drawRoute(path, color);

        redPart = path;
        myColor = color;
        isGraphDrawn = false;
    }

    public void setWaysToDraw(List<Long> nodes, Color color) {

        seenWaysToDraw = new HashSet<Long>(nodes);
        seenColor = color;
        //System.out.println("size of nodes" +nodes.size());
        //HashSet<Long> seenSet = new HashSet<Long>(nodes);
        //drawSeenWays(seenSet, color);
        isGraphDrawn = false;

        repaint();
    }

    private double scaleValueX(double x){
        return (((x*fullResolutionFactor*routeFactor)/zoomFactor+imageX*fullResolutionFactor*routeFactor));
    }

    private double scaleValueY(double y){
        return (((y*fullResolutionFactor*routeFactor)/zoomFactor+imageY*fullResolutionFactor*routeFactor));
    }

    private double scaleValueXNoZoom(double x){
        return (((x)*fullResolutionFactor));
    }

    private double scaleValueYNoZoom(double y){
        return (((y )*fullResolutionFactor));
    }

    @Override            //#############################################################################################################
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        zoomFactor = Math.round(zoomFactor*1000.0)/1000.0;
        if(zoomFactor <=1 & zoomLevel!=1){
            //isGraphDrawn=false;
            zoomLevel = 1;
        }else if(zoomFactor>=1.5 & zoomFactor <= 2.5 & zoomLevel!=2){
            //isGraphDrawn=false;
            zoomLevel = 2;
        }else if(zoomFactor >=4 & zoomFactor <= 6 & zoomLevel!=3){
            //isGraphDrawn=false;
            zoomLevel = 3;
        }else if(zoomFactor >=8 & zoomFactor <= 12 & zoomLevel!=4){
            //isGraphDrawn=false;
            zoomLevel = 4;
        }else if(zoomFactor >=16 & zoomLevel!=6){
            isGraphDrawn=false;
            zoomLevel = 6;
        }

        if(!inited) {
            drawGraph(ways, prerenderedImage);
            prerenderedImage = DrawingUtil.flipYCoordinate(prerenderedImage);
            inited = true;
        }

        if(!isGraphDrawn) {
            this.bufferedImage = new BufferedImage(bufferedImage.getWidth(),bufferedImage.getHeight(),BufferedImage.TYPE_INT_ARGB);

            if(zoomFactor<=1) {
                System.out.println("Changed: 100");
                //changeTilesResolution( 1);
                isGraphDrawn = true;
            }
            else if(zoomFactor>=1.5 & zoomFactor <= 2.5) {
                System.out.println("Changed: 250");
                //changeTilesResolution( 2);
                isGraphDrawn = true;
            }
            else if(zoomFactor>=4 & zoomFactor <=6) {
                System.out.println("Changed: 500");
                //changeTilesResolution( 3);
                isGraphDrawn = true;
            }
            else if(zoomFactor>=8 & zoomFactor <=14) {
                System.out.println("Changed: 1000");
                //changeTilesResolution( 4);
                isGraphDrawn = true;
            }
            else if(zoomFactor>=16) {
                //System.out.println("Changed: real");
                Instant start = Instant.now();
                changeTilesResolution( zoomLevel);
                Instant end = Instant.now();
                Duration timeElapsed = Duration.between(start, end);
                //System.out.println("Time taken: "+ timeElapsed.toSeconds() +"." + timeElapsed.toMillisPart() + " seconds" );
                isGraphDrawn = true;
            }
            //System.out.println("ZoomLevel: " + zoomLevel);
            //setScopeOfImage();
            //drawTilesBackgrounds();
            if(adjacencyList!=null) drawAdjList(adjacencyList, Color.red);
            if(redPart!=null) drawRoute(redPart, myColor);
            if(seenWaysToDraw!=null) drawSeenWays(seenWaysToDraw,seenColor);
            if(chosenLandmark!=-1) drawLandmark(chosenLandmark);
            //drawSeenNodes(testList,myColor);
            //drawGraph(ways, bufferedImage);
            //drawTiles(ways);
            //flipTiles(tiles);
            isGraphDrawn = true;
            bufferedImage = DrawingUtil.flipYCoordinate(bufferedImage);
            //consideredImage = DrawingUtil.flipYCoordinate(consideredImage);
        }
        if( clicked) {
            drawRedAndBlue();
            //ballImage = DrawingUtil.flipYCoordinate(ballImage);
            clicked = false;
        }

        //System.out.println("Zoom: " + zoomFactor);
        //System.out.println("ImageX and Y: " + imageX + "," + imageY);
        //if(mouseReleased) {
        //    for (Point p : tiles.keySet()) {
        //        boolean viewResMinus100 = p.x >= imageX  & p.y >= imageY  && p.x <= imageX + (1200) / zoomFactor & p.y <= imageY + (1200) / zoomFactor;
        //        boolean viewRes = p.x >= imageX - tileRes & p.y >= imageY - tileRes && p.x <= imageX + (viewResolution) / zoomFactor & p.y <= imageY + (viewResolution) / zoomFactor;
        //        boolean viewResPlus500 = p.x >= imageX - tileRes*5 & p.y >= imageY - tileRes*5 && p.x <= imageX + (viewResolution+tileRes*5) / zoomFactor & p.y <= imageY + (viewResolution+tileRes*5) / zoomFactor;
        //        if (viewRes) {
        //            if(zoomLevel!= 1 && zoomLevel!= 2 && zoomLevel!= 3 && zoomLevel!= 4 && tileZoom.get(p)!=zoomLevel ){
        //                if(drawTiles.containsValue(p) && !drawTiles.get(p)) {
        //                    drawTiles.put(p, true);
        //                    System.out.println("I am taking so long");
        //                }
        //                //changeTileResolution(zoomLevel,p);
        //            }
        //        }           else     if (viewResPlus500 ) {
        //            //if(zoomLevel!= 1 && zoomLevel!= 2 && zoomLevel!= 3 &&tileZoom.get(p)!=zoomLevel){
        //            //    drawTiles.put(p, false);
        //            //    System.out.println("I am taking too long");
        //            //    //changeTileResolution(zoomLevel,p);
        //            //}
        //        }
        //        mouseReleased = false;
        //    }
        //}
        int tilesDrawn = 0;

        //if(zoomLevel == 1 || zoomLevel == 2 || zoomLevel == 3|| zoomLevel == 4) {
            g.drawImage(prerenderedImage,
                    0,
                    0,
                    1300,
                    1300,
                    (int) ((imageX * fullResolutionFactor*8)),
                    (int) ((imageY * fullResolutionFactor*8)),
                    (int) (((imageX * fullResolutionFactor*8 + viewResolution * fullResolutionFactor*8 / (zoomFactor)))),
                    (int) (((imageY * fullResolutionFactor*8 + viewResolution * fullResolutionFactor*8 / (zoomFactor)))),
                    this);
        //} else {
        //    for (Point p : drawTiles.keySet()) {
        //        if(drawTiles.get(p)){
        //            tilesDrawn++;
        //            BufferedImage tile = tiles.get(p);
        //            g.drawImage(tile,
        //                    (int)((p.x-imageX*fullResolutionFactor)*zoomFactor),
        //                    (int)((p.y-imageY*fullResolutionFactor)*zoomFactor),
        //                    (int)((p.x+tileRes-imageX*fullResolutionFactor)*zoomFactor),
        //                    (int)((p.y+tileRes-imageY*fullResolutionFactor)*zoomFactor),
        //                    0,
        //                    0,
        //                    tile.getWidth(),
        //                    tile.getHeight(),
        //                    this);
        //        }
        //    }
        //}
        //System.out.println("Tiles drawn= " + tilesDrawn);
        //g.drawImage(consideredImage,
        //        0,
        //        0,
        //        1300,
        //        1300,
        //        (int) ((imageX * fullResolutionFactor   *routeFactor)),
        //        (int) ((imageY * fullResolutionFactor   *routeFactor)),
        //        (int) (((imageX * fullResolutionFactor  *routeFactor + viewResolution * fullResolutionFactor*routeFactor / (zoomFactor)))),
        //        (int) (((imageY * fullResolutionFactor  *routeFactor + viewResolution * fullResolutionFactor*routeFactor / (zoomFactor)))),
        //        this);

        g.drawImage(bufferedImage,
                0,
                0,
                1300,
                1300,
                (int) ((imageX * fullResolutionFactor   *routeFactor)),
                (int) ((imageY * fullResolutionFactor   *routeFactor)),
                (int) (((imageX * fullResolutionFactor  *routeFactor + viewResolution * fullResolutionFactor*routeFactor / (zoomFactor)))),
                (int) (((imageY * fullResolutionFactor  *routeFactor + viewResolution * fullResolutionFactor*routeFactor / (zoomFactor)))),
                this);

        g.drawImage(ballImage,
                0,
                0,
                1300,
                1300,
                (int) ((imageX * fullResolutionFactor   *routeFactor)),
                (int) ((imageY * fullResolutionFactor   *routeFactor)),
                (int) (((imageX * fullResolutionFactor  *routeFactor + viewResolution * fullResolutionFactor*routeFactor / (zoomFactor)))),
                (int) (((imageY * fullResolutionFactor  *routeFactor + viewResolution * fullResolutionFactor*routeFactor / (zoomFactor)))),
                this);

    }

    private void changeTilesResolution(double zoomLevel) {
        for (Point p : tilePoints) {
            if (p.x >= imageX - tileRes & p.y >= imageY - tileRes && p.x <= imageX + (viewResolution) / zoomFactor & p.y <= imageY + (viewResolution) / zoomFactor) {
                changeTileResolution(zoomLevel, p);
                tileZoom.put(p,zoomLevel);
            }
        }
    }

    private void changeTileResolution(double zoomLevel, Point p) {
        int res = (int) (Math.pow(2, zoomLevel - 1) * tileRes);
        BufferedImage biggerImage = new BufferedImage(res, res, BufferedImage.TYPE_INT_ARGB);
        tiles.put(p, biggerImage);
        drawTile(p);
    }

    private Map<Point, BufferedImage> flipTiles(Map<Point, BufferedImage> tiles) {
        for (Point p :  tilePoints) {
            BufferedImage tile = tiles.get(p);
            BufferedImage flippedTile = DrawingUtil.flipYCoordinate(tile);
            tiles.put(p,flippedTile);
        }
        return tiles;
    }

    private void drawTiles(List<CustomWay> ways) {
        for (Point p :  tilePoints) {
            drawTile(p);

        }

        isGraphDrawn = true;
    }

    private void drawTile(Point p) {
        //System.out.println("Before: " + ways.size());
        viewLimiter.setMargin(0,0);
        if(!this.tileWays.containsKey(p)) {
            List<CustomWay> limitedWays = viewLimiter.limitToRelevantWays(scaleValueXNoZoom(p.x), scaleValueYNoZoom(p.y), scaleValueXNoZoom(p.x + tileRes), scaleValueYNoZoom(p.y + tileRes), xOffset, yOffset, windowScale / fullResolutionFactor);
            System.out.println("Point: " + p + " ways: " + limitedWays.size());
            tileWays.put(p,limitedWays);
        }
        System.out.println("After: " + tileWays.get(p).size());
        BufferedImage tile = tiles.get(p);
        Graphics2D graph2d = tile.createGraphics();
        if(tileWays.size()!=0) drawTiles.put(p, true);

        for (CustomWay way: tileWays.get(p)) {
            long previousId = 0L;
            Iterator iterator = way.getNodeIdList().iterator();
            do {
                long currId = (long) iterator.next();
                if(previousId == 0L) {
                    previousId = currId;
                }
                else {
                    CustomNode previousNode = parser.getNodes().get(previousId);
                    double prevX = previousNode.getLatitudeAsXCoord();
                    double prevY = previousNode.getLongtitudeAsYCoord();

                    CustomNode currNode = parser.getNodes().get(currId);
                    double currX = currNode.getLatitudeAsXCoord();
                    double currY = currNode.getLongtitudeAsYCoord();

                    double scaleFactor =  (windowScale / fullResolutionFactor);

                    int yOffset = (int) viewLimiter.getLowestY();
                    int xOffset = (int) viewLimiter.getLowestX();

                    Point2D.Double prevPoint = nodeFinder.convertCoordsXYToImageXY(prevX, prevY, xOffset, yOffset, scaleFactor);
                    Point2D.Double currPoint = nodeFinder.convertCoordsXYToImageXY(currX, currY, xOffset, yOffset, scaleFactor);

                    graph2d.setStroke(new BasicStroke(1));
                    //if(p.x/tileRes %2 == 0 & p.y/tileRes %2 == 0 | p.x/tileRes %2 == 1 & p.y/tileRes %2 == 1) graph2d.setStroke(new BasicStroke(1));
                    graph2d.setColor(Color.BLACK);
                    double tileResoFactor = tile.getHeight()/tileRes;
                    Shape l = new Line2D.Double((prevPoint.x- p.x)*tileResoFactor,
                            (viewResolution-prevPoint.y- p.y)*tileResoFactor,
                            (currPoint.x- p.x)*tileResoFactor,
                            (viewResolution-currPoint.y- p.y)*tileResoFactor
                    );
                    graph2d.draw(l);


                    //drawCirclesOnTiles(p, tile, graph2d, Color.BLUE);
                    //if(p.x/tileRes %2 == 0 & p.y/tileRes %2 == 0 | p.x/tileRes %2 == 1 & p.y/tileRes %2 == 1) { //checkered pattern
                    //    drawCirclesOnTiles(p, tile, graph2d, Color.GREEN);
                    //}

                    previousId = currId;
                }
            } while(iterator.hasNext()); }


        graph2d.dispose();

    }

    private void drawCirclesOnTiles(Point p, BufferedImage tile, Graphics2D graph2d, Color color) {
        graph2d.setColor(color);
        graph2d.setStroke(new BasicStroke(1));
        //if(p.x/100 %2 == 0 & p.y/100 %2 == 0 | p.x/100 %2 == 1 & p.y/100 %2 == 1) { //checkered pattern
        //    graph2d.setColor(Color.GREEN);
        //    graph2d.setStroke(new BasicStroke(1));
        //}

        Shape circle = new Ellipse2D.Double(0,0, tile.getHeight(), tile.getWidth());
        graph2d.draw(circle);
    }

    //draws the red and blue circles to draw routes
    private void drawRedAndBlue() {
        Graphics2D graph2d = ballImage.createGraphics();
        int routeFactor = this.routeFactor/2;
        graph2d.setColor(Color.RED);
        if (!firstClick) {
            //drawBackground(ballImage);
            graph2d.dispose();
            this.ballImage = new BufferedImage(ballImage.getWidth(),ballImage.getHeight(),BufferedImage.TYPE_INT_ARGB);
            graph2d = ballImage.createGraphics();
            graph2d.setColor(Color.RED);
            if(redDrawX!=drawX && redDrawY !=drawY){
                redDrawX = drawX; redDrawY = drawY;
                Point2D pointToDrawAt = findClosestNodePoint(redDrawX, redDrawY);
                redDrawAtPointX = (int) pointToDrawAt.getX();
                redDrawAtPointY = (int) Math.abs(pointToDrawAt.getY()-ballImage.getHeight());
                //redDrawAtPointY = (int) pointToDrawAt.getY();
                System.out.println("Red: " + scaleValueX(redDrawX) + "," + scaleValueY(redDrawY));
                drawBlue=false;
            //System.out.println("NodeFound: " + String.valueOf(nodeFinder.findClosestNodeToPoint(pointToDrawAt.getX(), pointToDrawAt.getY(), parser.getNodes(), xOffset, yOffset, windowScale /routeFactor)));
            }
        }
        Shape red = new Ellipse2D.Double(redDrawAtPointX-5, redDrawAtPointY-5, 10*routeFactor, 10*routeFactor);
        graph2d.fill(red);
        graph2d.draw(red);

        graph2d.setColor(Color.BLUE);
        if (firstClick) {
            if(blueDrawX!=drawX && blueDrawY !=drawY) {
                blueDrawX = drawX;
                blueDrawY = drawY;
            }
            System.out.println("Blue: " + scaleValueX(blueDrawX) + "," + scaleValueY(blueDrawY));
            drawBlue = true;
        }
        if(drawBlue) {
            Point2D pointToDrawAt = findClosestNodePoint(blueDrawX, blueDrawY);
            blueDrawAtPointX = (int) pointToDrawAt.getX();
            blueDrawAtPointY = (int) Math.abs(pointToDrawAt.getY()-ballImage.getHeight());
            //blueDrawAtPointY = (int) pointToDrawAt.getY();
            Shape blue = new Ellipse2D.Double(blueDrawAtPointX-5, blueDrawAtPointY-5, 10*routeFactor, 10*routeFactor);
            graph2d.fill(blue);
            graph2d.draw(blue);

            //System.out.println("NodeFound: " + String.valueOf(nodeFinder.findClosestNodeToPoint(pointToDrawAt.getX(), pointToDrawAt.getY(), parser.getNodes(), xOffset, yOffset, windowScale /routeFactor)));

            firePropertyChange("SecoundClick", false, true);
        }

        graph2d.dispose();
    }

    private Point2D findClosestNodePoint(int drawX, int drawY) {
        long node = nodeFinder.findClosestNodeToPoint(scaleValueX(drawX), scaleValueY(drawY), parser.getNodes(), xOffset, yOffset, windowScale / (fullResolutionFactor * routeFactor));
        return nodeFinder.convertCoordsXYToImageXY(
                parser.getNodes().get(node).getLatitudeAsXCoord(),
                parser.getNodes().get(node).getLongtitudeAsYCoord(),
                xOffset, yOffset, windowScale / (fullResolutionFactor * routeFactor));
    }

    private double zoomCalculation(double zoomFactor) {
        double res = viewResolution * fullResolutionFactor / zoomFactor;
        double diffRes = viewResolution * fullResolutionFactor - res;
        return diffRes;
    }

    private double zoomCalculationTiles(double zoomFactor) {
        double res = 100  / zoomFactor;
        double diffRes = 100  - res;
        return diffRes;
    }



    private void drawBackground(BufferedImage image) {
        Graphics2D graph2d = image.createGraphics();
        graph2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_OFF);
        graph2d.setColor(Color.WHITE);
        graph2d.fillRect(0,0,image.getWidth(),image.getHeight());
        graph2d.dispose();
    }

    private void drawTilesBackgrounds() {
        for (Point p :  tilePoints) {
            drawTileBackground(p);
        }

        //drawCirclesInTiles();
    }

    private void drawTileBackground(Point p) {
        BufferedImage bufferedImage = tiles.get(p);
        Graphics2D graph2d = bufferedImage.createGraphics();
        graph2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_OFF);
        graph2d.setColor(Color.WHITE);
        graph2d.fillRect(0,0,bufferedImage.getWidth(),bufferedImage.getHeight());
        graph2d.dispose();
    }

    private void drawCirclesInTiles() {
        for (Point p :  tilePoints) {
            BufferedImage bufferedImage = tiles.get(p);
            Graphics2D graph2d = bufferedImage.createGraphics();
            BufferedImage tile = tiles.get(p);

            graph2d.setStroke(new BasicStroke(15));
            graph2d.setColor(Color.BLUE);
            Shape rec = new Ellipse2D.Double(0,0,tile.getHeight(), tile.getWidth());
            graph2d.draw(rec);
            graph2d.dispose();
        }
    }

    private void drawRoute(List<Long> route, Color color) {
        int fullResolutionFactor = this.fullResolutionFactor*routeFactor;
        Graphics2D graph2d = bufferedImage.createGraphics();
        graph2d.setStroke(new BasicStroke(1*routeFactor));
        int alpha = 255; // 50% transparent
        Color myColour = new Color(color.getRed(), color.getGreen(), color.getBlue(), alpha);
        graph2d.setColor(myColour);
        if(route.size()>0) {
            long previousId = 0L;
            Iterator iterator = route.iterator();
            do {
                long currId = (long) iterator.next();
                if(previousId == 0L) {
                    previousId = currId;
                }
                else {
                    CustomNode previousNode = parser.getNodes().get(previousId);
                    double prevX = previousNode.getLatitudeAsXCoord();
                    double prevY = previousNode.getLongtitudeAsYCoord();

                    CustomNode currNode = parser.getNodes().get(currId);
                    double currX = currNode.getLatitudeAsXCoord();
                    double currY = currNode.getLongtitudeAsYCoord();

                    double scaleFactor =  (windowScale / fullResolutionFactor);
                    int yOffset = this.yOffset;
                    int xOffset = this.xOffset;
                    Shape l = new Line2D.Double(((prevX-xOffset)/ scaleFactor),
                            //Math.abs(((prevY-yOffset)/ scaleFactor)-fullResolutionY*routeFactor),
                            (((prevY-yOffset)/ scaleFactor)),
                            ((currX-xOffset)/ scaleFactor),
                            //Math.abs(((currY-yOffset)/ scaleFactor)-fullResolutionY*routeFactor) );
                            (((currY-yOffset)/ scaleFactor)));
                    graph2d.draw(l);
                    previousId = currId;
                }
            } while(iterator.hasNext()); }
        graph2d.dispose();
    }

    private void drawSeenWays(HashSet<Long> nodes, Color color) {
        int fullResolutionFactor = this.fullResolutionFactor*routeFactor;
        //this.consideredImage = new BufferedImage(consideredImage.getWidth(),consideredImage.getHeight(),BufferedImage.TYPE_INT_ARGB);
        Graphics2D graph2d = bufferedImage.createGraphics();
        graph2d.setStroke(new BasicStroke(2));
        int alpha = 255; // 0% transparent
        Color myColour = new Color(color.getRed(), color.getGreen(), color.getBlue(), alpha);
        graph2d.setColor(myColour);
        for (CustomWay way: ways) {
            long previousId = 0L;
            Iterator iterator = way.getNodeIdList().iterator();
            do {
                long currId = (long) iterator.next();
                //if(adjacencyList != null && nodes.contains(currId) &&  adjacencyList.get(currId) != null && adjacencyList.get(currId).size()!=0) {
                    if (previousId == 0L) {
                        previousId = currId;
                    } else {
                        if (nodes.contains(currId) && nodes.contains(previousId)) {
                            CustomNode previousNode = parser.getNodes().get(previousId);
                            double prevX = previousNode.getLatitudeAsXCoord();
                            double prevY = previousNode.getLongtitudeAsYCoord();

                            CustomNode currNode = parser.getNodes().get(currId);
                            double currX = currNode.getLatitudeAsXCoord();
                            double currY = currNode.getLongtitudeAsYCoord();

                            double scaleFactor = (windowScale / fullResolutionFactor);

                            int yOffset = (int) viewLimiter.getLowestY();
                            int xOffset = (int) viewLimiter.getLowestX();

                            Point2D.Double prevPoint = nodeFinder.convertCoordsXYToImageXY(prevX, prevY, xOffset, yOffset, scaleFactor);
                            Point2D.Double currPoint = nodeFinder.convertCoordsXYToImageXY(currX, currY, xOffset, yOffset, scaleFactor);

                            Shape l = new Line2D.Double(prevPoint.x,
                                    prevPoint.y,
                                    currPoint.x,
                                    currPoint.y);
                            graph2d.draw(l);
                            previousId = currId;
                        }
                    //}
                }
            } while(iterator.hasNext()); }

        System.out.println("Done with drawing");
        graph2d.dispose();
    }

    public void drawAdjList(HashMap<Long, List<Edge>> adjacencyList, Color color) {
        System.out.println("Drawing adjList");
        //this.bufferedImage = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), BufferedImage.TYPE_INT_ARGB);
        int fullResolutionFactor = this.fullResolutionFactor*routeFactor;
        Graphics2D graph2d = bufferedImage.createGraphics();

        graph2d.setStroke(new BasicStroke(1));
        int alpha = 255; // 50% transparent
        Color myColour = new Color(color.getRed(), color.getGreen(), color.getBlue(), alpha);
        graph2d.setColor(myColour);

        for (Long id : adjacencyList.keySet()) {
            for (Edge edge : adjacencyList.get(id)) {
                Long start = id;
                long dest = edge.getDestinationId();

                CustomNode previousNode = parser.getNodes().get(start);
                double prevX = previousNode.getLatitudeAsXCoord();
                double prevY = previousNode.getLongtitudeAsYCoord();

                CustomNode currNode = parser.getNodes().get(dest);
                double currX = currNode.getLatitudeAsXCoord();
                double currY = currNode.getLongtitudeAsYCoord();

                double scaleFactor = (windowScale / fullResolutionFactor);

                int yOffset = (int) viewLimiter.getLowestY();
                int xOffset = (int) viewLimiter.getLowestX();

                Point2D.Double prevPoint = nodeFinder.convertCoordsXYToImageXY(prevX, prevY, xOffset, yOffset, scaleFactor);
                Point2D.Double currPoint = nodeFinder.convertCoordsXYToImageXY(currX, currY, xOffset, yOffset, scaleFactor);

                Shape l = new Line2D.Double(prevPoint.x,
                        prevPoint.y,
                        currPoint.x,
                        currPoint.y);
                graph2d.draw(l);
            }

        }
        graph2d.dispose();
    }

    private void drawSeenNodes(List<Long> nodes, Color color) {
        int fullResolutionFactor = this.fullResolutionFactor*routeFactor;
        Graphics2D graph2d = bufferedImage.createGraphics();
        graph2d.setStroke(new BasicStroke(2));
        int alpha = 40; // 50% transparent
        Color myColour = new Color(color.getRed(), color.getGreen(), color.getBlue(), alpha);
        graph2d.setColor(myColour);
        for (Long id : nodes){
            CustomNode node = parser.getNodes().get(id);
            double nodeX = node.getLatitudeAsXCoord();
            double nodeY = node.getLongtitudeAsYCoord();

            double scaleFactor =  (windowScale / fullResolutionFactor);

            int yOffset = (int) viewLimiter.getLowestY();
            int xOffset = (int) viewLimiter.getLowestX();

            Point2D.Double nodePoint = nodeFinder.convertCoordsXYToImageXY(nodeX, nodeY, xOffset, yOffset, scaleFactor);

            Shape mark = new Ellipse2D.Double(nodePoint.x, nodePoint.y, 1, 1);
            graph2d.draw(mark);
        }
        graph2d.dispose();
        repaint();
    }

    private void drawGraph(List<CustomWay> ways, BufferedImage bufferedImage) {
        Graphics2D graph2d = bufferedImage.createGraphics();
        int fullResolutionFactor = this.fullResolutionFactor*8;
        graph2d.setStroke(new BasicStroke(1));
        graph2d.setColor(Color.BLACK);
        for (CustomWay way: ways) {
            long previousId = 0L;
            Iterator iterator = way.getNodeIdList().iterator();
            do {
                long currId = (long) iterator.next();
                if(previousId == 0L) {
                    previousId = currId;
                }
                else {
                    CustomNode previousNode = parser.getNodes().get(previousId);
                    double prevX = previousNode.getLatitudeAsXCoord();
                    double prevY = previousNode.getLongtitudeAsYCoord();

                    CustomNode currNode = parser.getNodes().get(currId);
                    double currX = currNode.getLatitudeAsXCoord();
                    double currY = currNode.getLongtitudeAsYCoord();

                    double scaleFactor =  (windowScale / fullResolutionFactor);

                    int yOffset = (int) viewLimiter.getLowestY();
                    int xOffset = (int) viewLimiter.getLowestX();

                    Point2D.Double prevPoint = nodeFinder.convertCoordsXYToImageXY(prevX, prevY, xOffset, yOffset, scaleFactor);
                    Point2D.Double currPoint = nodeFinder.convertCoordsXYToImageXY(currX, currY, xOffset, yOffset, scaleFactor);

                    Shape l = new Line2D.Double(prevPoint.x,
                                                prevPoint.y,
                                                currPoint.x,
                                                currPoint.y);
                    graph2d.draw(l);
                    previousId = currId;
                }
            } while(iterator.hasNext()); }


        graph2d.dispose();
    }

    private void drawGraphTiles(List<CustomWay> ways, BufferedImage bufferedImage) {
        Graphics2D graph2d = bufferedImage.createGraphics();
        graph2d.setStroke(new BasicStroke(15));
        graph2d.setColor(Color.BLACK);


        isGraphDrawn = true;
    }

    public void setImageX(int imageX) {
        this.imageX = imageX;
    }

    public void setImageY(int imageY) {
        this.imageY = imageY;
    }

    public void drawReducedGraph() {
        //drawSeenWays(new ArrayList<>(adjencencyList.keySet()), Color.red);
        repaint();
    }


    public List<Long> getFromNodes() {
        long nodeFrom = nodeFinder.findClosestNodeToPoint(scaleValueX(redDrawX),
                scaleValueY(redDrawY),
                parser.getNodes(),
                xOffset,
                yOffset,
                windowScale / (fullResolutionFactor * routeFactor));
        List<Long> closestNodes = nodeFinder.findClosestReducedNodes(nodeFrom, parser, reducedAdjList);
        from.put(nodeFrom, closestNodes);
        return closestNodes;
    }
    public List<Long> getToNodes() {
        long nodeTo = nodeFinder.findClosestNodeToPoint(scaleValueX(blueDrawX),
                scaleValueY(blueDrawY),
                parser.getNodes(),
                xOffset,
                yOffset,
                windowScale /(fullResolutionFactor*routeFactor));
        List<Long> closestNodes = nodeFinder.findClosestReducedNodes(nodeTo, parser, reducedAdjList);
        to.put(nodeTo, closestNodes);
        return closestNodes;
    }

    public String getFrom() {
        return String.valueOf(nodeFinder.findClosestNodeToPoint(scaleValueX(redDrawX), scaleValueY(redDrawY), parser.getNodes(), xOffset, yOffset, windowScale / (fullResolutionFactor * routeFactor)));
    }
    public String getTo() {
        return String.valueOf(nodeFinder.findClosestNodeToPoint(scaleValueX(blueDrawX), scaleValueY(blueDrawY), parser.getNodes(), xOffset, yOffset, windowScale /(fullResolutionFactor*routeFactor)));
    }

    public void setAdjacencyList(HashMap<Long, List<Edge>> adjacencyList) {
        System.out.println("AdjList set!");
        this.adjacencyList = adjacencyList;
        isGraphDrawn = false;
    }



    public HashMap<Long, List<Edge>> getReducedAdjList() {
        return reducedAdjList;
    }

    public void setReducedAdjList(HashMap<Long, List<Edge>> reducedAdjList) {
        this.reducedAdjList = reducedAdjList;
    }


    public void drawLandmark(long chosenLandmark) {
        System.out.println("Drawing landmark: " + chosenLandmark);
        int fullResolutionFactor = this.fullResolutionFactor*routeFactor;
        Graphics2D graph2d = bufferedImage.createGraphics();
        graph2d.setStroke(new BasicStroke(10));
        Color myColour = new Color(255, 0, 0, 255);
        graph2d.setColor(myColour);
        CustomNode node = parser.getNodes().get(chosenLandmark);
        double nodeX = node.getLatitudeAsXCoord();
        double nodeY = node.getLongtitudeAsYCoord();
        double scaleFactor =  (windowScale / fullResolutionFactor);
        int yOffset = (int) viewLimiter.getLowestY();
        int xOffset = (int) viewLimiter.getLowestX();
        Point2D.Double nodePoint = nodeFinder.convertCoordsXYToImageXY(nodeX, nodeY, xOffset, yOffset, scaleFactor);
        Shape mark = new Ellipse2D.Double(nodePoint.x-50, nodePoint.y-50, 100, 100);
        graph2d.draw(mark);
        Shape mark2 = new Ellipse2D.Double(nodePoint.x, nodePoint.y, 1, 1);
        graph2d.draw(mark2);
        graph2d.dispose();
    }

    public void setLandmark(long chosenLandmark) {
        this.chosenLandmark = chosenLandmark;
        isGraphDrawn = false;
    }
}
































