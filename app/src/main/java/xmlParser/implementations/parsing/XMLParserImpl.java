/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package xmlParser.implementations.parsing;
import crosby.binary.osmosis.OsmosisReader;
import org.opengis.referencing.FactoryException;
import xmlParser.framework.XMLParser;
import xmlParser.implementations.util.DistanceCalculatorImpl;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.*;

public class XMLParserImpl implements XMLParser {
    private Map<Long, CustomWay> ways = new HashMap<>();
    private Map<Long, CustomNode> nodes = new HashMap<>();
    private Set<Long> nodesToSearchFor = new HashSet<>();
    private DistanceCalculatorImpl distanceCalculator;

    @Override
    public void parse(String path) throws FileNotFoundException {
        InputStream inputStream = new FileInputStream(path);//"app/src/resources/malta-latest.osm.pbf");
        OsmosisReader reader = new OsmosisReader(inputStream);
        try {
            this.distanceCalculator = new DistanceCalculatorImpl("EPSG:4326", "EPSG:25832");
            //First pass through data
            reader.setSink(new FirstPassSink(this));
            reader.run();
            //Second pass through data
            InputStream inputStream1 = new FileInputStream(path);//"app/src/resources/malta-latest.osm.pbf");
            OsmosisReader reader1 = new OsmosisReader(inputStream1);
            reader1.setSink(new SecondPassSink(this));
            reader1.run();
        } catch (FactoryException e) {
            e.printStackTrace();
        }

    }
    @Override
    public Map<Long, CustomWay> getWays() {
        return ways;
    }

    @Override
    public Set<Long> getNodesToSearchFor() {
        return nodesToSearchFor;
    }

    @Override
    public Map<Long, CustomNode> getNodes() {
        return nodes;
    }

    @Override
    public DistanceCalculatorImpl getDistanceCalculator() {
        return distanceCalculator;
    }

    public void filterFerryWays(){
        List<CustomWay> waysToRemove = new ArrayList<>();
        List<Long> nodesToRemove = new ArrayList<>();
        List<Long> nodesToSave = new ArrayList<>();
        List<CustomWay> ferryWays = new ArrayList<>();
        for(CustomWay wayOuter: ways.values()){
            if(wayOuter.getTagId().equals("ferry")) {
                List<Long> nodeIds = wayOuter.getNodeIdList();
                long firstId = nodeIds.get(0);
                long lastId = nodeIds.get(nodeIds.size()-1);
                int firstCount = 0;
                int lastCount = 0;
                for(CustomWay wayInner: ways.values()){
                    List<Long> idsToMatch = wayInner.getNodeIdList();
                    if(idsToMatch.contains(firstId) && !wayInner.getTagId().equals("ferry")){
                        //Increment the counter for every road connected to the node that is not a ferry road
                        firstCount++;
                    }
                    if(idsToMatch.contains(lastId) && !wayInner.getTagId().equals("ferry")){
                        //Increment the counter for every road connected to the node that is not a ferry road
                        lastCount++;
                    }
                }

                boolean nodeIsNotPartOfOtherHighways = firstCount == 0 || lastCount == 0;
                if(nodeIsNotPartOfOtherHighways) {
                    if(firstCount > 0){
                        nodesToSave.add(firstId);
                    }
                    if(lastCount > 0){
                        nodesToSave.add(lastId);
                    }
                    nodesToRemove.addAll(wayOuter.getNodeIdList());
                    waysToRemove.add(wayOuter);
                } else {
                    ferryWays.add(wayOuter);
                }
            }
        }
        for(CustomWay way: waysToRemove){
            ways.remove(way.getId());
        }
        nodesToRemove.removeAll(nodesToSave);

        for(Long id: nodesToRemove){
            for (CustomWay way: ferryWays){
                    if(!way.getNodeIdList().contains(id)){
                        nodes.remove(id);
                    }
            }
        }
    }
}

